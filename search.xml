<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LSFR序列密码</title>
    <url>/2021/05/30/LSFR%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="0x00-数学表述"><a href="#0x00-数学表述" class="headerlink" title="0x00 数学表述"></a>0x00 数学表述</h2><h2 id="0x01-周期"><a href="#0x01-周期" class="headerlink" title="0x01 周期"></a>0x01 周期</h2><h2 id="0x02-序列表示"><a href="#0x02-序列表示" class="headerlink" title="0x02 序列表示"></a>0x02 序列表示</h2><h2 id="0x03-m序列"><a href="#0x03-m序列" class="headerlink" title="0x03 m序列"></a>0x03 m序列</h2><h2 id="0x04-序列的合成与分解"><a href="#0x04-序列的合成与分解" class="headerlink" title="0x04 序列的合成与分解"></a>0x04 序列的合成与分解</h2><h2 id="0x05-前馈与序列"><a href="#0x05-前馈与序列" class="headerlink" title="0x05 前馈与序列"></a>0x05 前馈与序列</h2>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>tushare.trade_cal()失效的解决方法</title>
    <url>/2021/05/28/tushare-trade-cal-%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="0x00-问题描述"><a href="#0x00-问题描述" class="headerlink" title="0x00 问题描述"></a>0x00 问题描述</h2><p>写回测框架时，调用<code>tushare.trade_cal()</code>读取全部交易日期时报错。</p>
<p>查看源代码（<code>/tushare/util/dateu.py</code>）如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> tushare.stock <span class="keyword">import</span> cons <span class="keyword">as</span> ct</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade_cal</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            交易日历</span></span><br><span class="line"><span class="string">    isOpen=1是交易日，isOpen=0为休市</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    df = pd.read_csv(ct.ALL_CAL_FILE)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>

<p>定位到<code>/tushare/stock/cons.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line">P_TYPE = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;ftp&#x27;</span>: <span class="string">&#x27;ftp://&#x27;</span>&#125;</span><br><span class="line">DOMAINS = &#123;<span class="string">&#x27;sina&#x27;</span>: <span class="string">&#x27;sina.com.cn&#x27;</span>, <span class="string">&#x27;sinahq&#x27;</span>: <span class="string">&#x27;sinajs.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;ifeng&#x27;</span>: <span class="string">&#x27;ifeng.com&#x27;</span>, <span class="string">&#x27;sf&#x27;</span>: <span class="string">&#x27;finance.sina.com.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;vsf&#x27;</span>: <span class="string">&#x27;vip.stock.finance.sina.com.cn&#x27;</span>, </span><br><span class="line">           <span class="string">&#x27;idx&#x27;</span>: <span class="string">&#x27;www.csindex.com.cn&#x27;</span>, <span class="string">&#x27;163&#x27;</span>: <span class="string">&#x27;money.163.com&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;em&#x27;</span>: <span class="string">&#x27;eastmoney.com&#x27;</span>, <span class="string">&#x27;sseq&#x27;</span>: <span class="string">&#x27;query.sse.com.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;sse&#x27;</span>: <span class="string">&#x27;www.sse.com.cn&#x27;</span>, <span class="string">&#x27;szse&#x27;</span>: <span class="string">&#x27;www.szse.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;oss&#x27;</span>: <span class="string">&#x27;file.tushare.org&#x27;</span>, <span class="string">&#x27;idxip&#x27;</span>:<span class="string">&#x27;115.29.204.48&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;shibor&#x27;</span>: <span class="string">&#x27;www.shibor.org&#x27;</span>, <span class="string">&#x27;mbox&#x27;</span>:<span class="string">&#x27;www.cbooo.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;tt&#x27;</span>: <span class="string">&#x27;gtimg.cn&#x27;</span>, <span class="string">&#x27;gw&#x27;</span>: <span class="string">&#x27;gw.com.cn&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;v500&#x27;</span>: <span class="string">&#x27;value500.com&#x27;</span>, <span class="string">&#x27;sstar&#x27;</span>: <span class="string">&#x27;stock.stockstar.com&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;dfcf&#x27;</span>: <span class="string">&#x27;nufm.dfcfw.com&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">ALL_CAL_FILE = <span class="string">&#x27;%s%s/tsdata/calAll.csv&#x27;</span>%(P_TYPE[<span class="string">&#x27;http&#x27;</span>], DOMAINS[<span class="string">&#x27;oss&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>故<code>tushare.trade_cal()</code>函数是想要从<code>http://file.tushare.org/tsdata/calAll.csv</code>读取已存csv文件，但该链接已失效。</p>
<p>推测是tushare推出了pro版，便移除了普通版的这一接口。pro版对应的语法是<code>tushare.pro_api().pro.query(&#39;trade_cal&#39;)</code>，但其需要注册，还有可能要付费，我当然不想这么做。</p>
<h2 id="0x01-尝试解决"><a href="#0x01-尝试解决" class="headerlink" title="0x01 尝试解决"></a>0x01 尝试解决</h2><p>之前从<code>calAll.csv</code>中读取到的数据格式如下，其中”1”代表交易日，”0”为非交易日，且A股开市时间为1990-12-19。</p>
<p><img src="https://i.loli.net/2021/05/28/ZTrGRdeN354wba6.png" alt="data.PNG"></p>
<p>因此我们只需要构造函数，满足下列功能：</p>
<ol>
<li>查询1990-12-19至今所有日期</li>
<li>查询至今为止所有交易日</li>
<li>构造上图所示01表</li>
</ol>
<h3 id="1-1-查询全部日期"><a href="#1-1-查询全部日期" class="headerlink" title="1.1 查询全部日期"></a>1.1 查询全部日期</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">today = datetime.date.today() <span class="comment">#今天</span></span><br><span class="line">all_days = pd.date_range(<span class="string">&#x27;1990-12-19&#x27;</span>, today) <span class="comment">#全部日期，type = DatetimeIndex</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-查询全部交易日"><a href="#1-2-查询全部交易日" class="headerlink" title="1.2 查询全部交易日"></a>1.2 查询全部交易日</h3><p>交易日即工作日，这里对热心网友的<a href="https://zhuanlan.zhihu.com/p/341131487">轮子</a>稍作修改，在此表示感谢。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># python : 3.8.8</span></span><br><span class="line"><span class="comment"># trade_work_days.py</span></span><br><span class="line"><span class="comment"># save to &quot;work_day.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从百度的php接口中获取到数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_url_from_baidu</span>(<span class="params">calcultaion_year, month</span>):</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="built_in">str</span>(calcultaion_year) + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;resource_id&quot;</span>: <span class="string">&quot;39043&quot;</span>,</span><br><span class="line">        <span class="string">&quot;t&quot;</span>: <span class="string">&quot;1604395059555&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;oe&quot;</span>: <span class="string">&quot;gbk&quot;</span>,</span><br><span class="line">        <span class="string">&quot;format&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tn&quot;</span>: <span class="string">&quot;wisetpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cb&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 抓取位置：百度搜索框搜索日历，上面的日历的接口，可以在页面上进行核对</span></span><br><span class="line">    r = requests.get(url=<span class="string">&quot;https://sp0.baidu.com/8aQDcjqpAAV3otqbppnN2DJv/api.php&quot;</span>,</span><br><span class="line">                     headers=header, params=param).text</span><br><span class="line">    month_data = json.loads(r)[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;almanac&quot;</span>]</span><br><span class="line">    work_day = []</span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> month_data:</span><br><span class="line">        <span class="keyword">if</span> (one[<span class="string">&quot;cnDay&quot;</span>] != <span class="string">&#x27;日&#x27;</span> <span class="keyword">and</span> one[<span class="string">&quot;cnDay&quot;</span>] != <span class="string">&#x27;六&#x27;</span></span><br><span class="line">            <span class="keyword">and</span> (<span class="string">&#x27;status&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> one)):</span><br><span class="line">            oneDateStr = one[<span class="string">&quot;year&quot;</span>]+<span class="string">&#x27;-&#x27;</span>+one[<span class="string">&quot;month&quot;</span>] + <span class="string">&#x27;-&#x27;</span>+ one[<span class="string">&quot;day&quot;</span>] <span class="comment">#关键一步：提取工作日; type = str</span></span><br><span class="line">            oneDate = datetime.datetime.strptime(oneDateStr, <span class="string">&quot;%Y-%m-%d&quot;</span>).date() <span class="comment"># str to datetime.date</span></span><br><span class="line">            work_day.append(oneDate)</span><br><span class="line">    <span class="comment">#print_info(work_day)</span></span><br><span class="line">    <span class="keyword">return</span> work_day</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出格式，可以修改成insert语句进行输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">work_day</span>):</span></span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> work_day:        </span><br><span class="line">        <span class="built_in">print</span>(one[<span class="string">&quot;year&quot;</span>]+<span class="string">&#x27;-&#x27;</span>+one[<span class="string">&quot;month&quot;</span>] + <span class="string">&#x27;-&#x27;</span>+ one[<span class="string">&quot;day&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 此处只能算当年之前的，因为国务院是每年12月份才会发布第二年的放假计划，所以此接口对于下一年的统计是错的。</span></span><br><span class="line">    <span class="comment"># eg：2020年11月4日，国务院没有发布21年的放假计划，那查询2021年元旦的时候，元旦那天不显示休息</span></span><br><span class="line">    </span><br><span class="line">    calcultaion_year_list = <span class="built_in">range</span>(<span class="number">1990</span>, <span class="number">2021</span> + <span class="number">1</span>)</span><br><span class="line">    work_day_list = []</span><br><span class="line">    <span class="keyword">for</span> calcultaion_year <span class="keyword">in</span> calcultaion_year_list:</span><br><span class="line">        <span class="built_in">print</span>(calcultaion_year)</span><br><span class="line">        <span class="comment"># 因该接口传入的时间，查询了前一个月，当前月和后一个月的数据，所以只需要2、5、8、11即可全部获取到。比如查询5月份，则会查询4,5,6月分的数据</span></span><br><span class="line">        calculation_month = [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;11&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> one_month <span class="keyword">in</span> calculation_month:</span><br><span class="line">            work_day_list += catch_url_from_baidu(calcultaion_year, one_month)</span><br><span class="line">            time.sleep(random.uniform(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line">        time.sleep(random.uniform(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;work_day.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(work_day_list)):</span><br><span class="line">            f.write(work_day_list[i] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-构造01表"><a href="#1-3-构造01表" class="headerlink" title="1.3 构造01表"></a>1.3 构造01表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加01列</span></span><br><span class="line">trade_cal = pd.DataFrame(np.zeros(<span class="built_in">len</span>(all_days), <span class="built_in">int</span>), index = all_days, columns = [<span class="string">&#x27;isOpen&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> all_days:   </span><br><span class="line">	<span class="keyword">if</span> day.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)+<span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> work_days_list:</span><br><span class="line">		trade_cal.loc[day] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#添加calendarDate列</span></span><br><span class="line">trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>] = all_days</span><br><span class="line">    </span><br><span class="line"><span class="comment">#保存为csv</span></span><br><span class="line">trade_cal.to_csv(<span class="string">&quot;trade_cal_%s.csv&quot;</span> % (today.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="0x02-完整代码"><a href="#0x02-完整代码" class="headerlink" title="0x02 完整代码"></a>0x02 完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># python : 3.8.8</span></span><br><span class="line"><span class="comment"># tushare.trade_cal()替代函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade_cal_new</span>():</span></span><br><span class="line">    today = datetime.date.today() <span class="comment">#今天</span></span><br><span class="line">    all_days = pd.date_range(<span class="string">&#x27;1990-12-19&#x27;</span>, today) <span class="comment">#全部日期，type(all_days) = DatetimeIndex, type(all_days[i]) = Timestamp</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#交易日</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;work_day.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        work_days_list = f.readlines() <span class="comment"># &#x27;1990-12-19\n&#x27;</span></span><br><span class="line">        <span class="comment">#work_days = pd.to_datetime(work_days_list) #type(work_days) = DatetimeIndex, type(work_days[i]) = Timestamp</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#判断工作日数据是否要更新</span></span><br><span class="line">        last_days = work_days[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> today.year &gt; last_days.year:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;工作日数据需要更新&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#添加01列</span></span><br><span class="line">    trade_cal = pd.DataFrame(np.zeros(<span class="built_in">len</span>(all_days), <span class="built_in">int</span>), index = all_days, columns = [<span class="string">&#x27;isOpen&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> all_days:   </span><br><span class="line">        <span class="keyword">if</span> day.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)+<span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> work_days_list:</span><br><span class="line">            trade_cal.loc[day] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">#添加calendarDate列</span></span><br><span class="line">    trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>] = all_days</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存为csv</span></span><br><span class="line">    trade_cal.to_csv(<span class="string">&quot;trade_cal_%s.csv&quot;</span> % (today.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> trade_cal</span><br><span class="line"></span><br><span class="line">trade_cal = trade_cal_new()</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/28/P8e1EohgaRqCynU.png" alt="result.PNG"></p>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>quant</tag>
      </tags>
  </entry>
  <entry>
    <title>咏春拳记</title>
    <url>/2021/05/29/%E5%92%8F%E6%98%A5%E6%8B%B3%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="（一）开蒙"><a href="#（一）开蒙" class="headerlink" title="（一）开蒙"></a>（一）开蒙</h2><p>我二十三岁学拳，开蒙师傅是雍文，叶系郭富伦佳一脉。</p>
<p>每周一次大课，苦练三个月而不得法。</p>
<p>在这里我结识了一生的挚友，李万拳。</p>
<p>有一天他鬼鬼祟祟把我拉到角落里说，</p>
<p>“学校附近也有个师傅在教拳，要不要去看看咯？”</p>
<h2 id="（二）苦练"><a href="#（二）苦练" class="headerlink" title="（二）苦练"></a>（二）苦练</h2><p>第二位师傅叫龙祖华，也是叶系咏春，但师承不详。</p>
<p>据说老爷子以前是狱警，退休后就回家专心教拳。</p>
<p>这间由公寓改建的拳馆就在学校南门，每月“上供“五百，随便学。</p>
<p>我和小李一周有六个晚上都泡在这里，每晚至少两个小时。</p>
<p>咏春是双人拳，即使是套路拆招，也非要两个人一起培养手感。</p>
<p>我和小李相互喂拳，桥手（手腕往上三指宽的部分）常打的红肿，由红变紫，紫里透黄。如此反复数次，对练时痛感就少了很多。</p>
<p>身体素质方面我比小李差太多，好在笨人爱下苦功夫，有时回来后还会自己“偷偷”练会儿。</p>
<p>有次师傅对小李说，你这步法明显不如东子，是不是最近偷懒了。</p>
<p>我听了很得意，心说这是我自己挣的。</p>
<p>功夫迷人的地方正在于此，正所谓：</p>
<p>日日练日日功，一日不练十日空。</p>
<p>每一次的练习，一点一滴都化成了我自己的身体哲学。</p>
<p>除了套路拆招外，还有一个重要项目，就是实战模拟。</p>
<p>大师兄摆个问手站着不动，你可以使用任何招数打他，他只防守，不还手。</p>
<p>龙师傅通过这种方式消除新手在实战中紧张，恐惧和愤怒的心态，大师兄也能以此练反应。</p>
<p>我每次打的兴起的时候，龙师傅都会操着湖南口音大喊“稳住，不要方！”</p>
<p>后来我才知道龙师傅是叫我别慌。</p>
<p>拳馆“鱼龙混杂”，除了像我一样的学生外，还有体育老师，跆拳道教练，保安，白领，个体户，歪果仁，小学生等等。</p>
<p>每次下课后，大家都要围坐在一起喝茶聊拳理。</p>
<p>拳理也通人情事理，我得了咏春拳的好处，不仅仅是在技法上。</p>
<p>但好景不长，因校区搬迁，便中断了咏春的学习。</p>
<p>在龙师傅这里，也只学了一套小念头。</p>
<h2 id="（三）插曲"><a href="#（三）插曲" class="headerlink" title="（三）插曲"></a>（三）插曲</h2><p>一年暑休，居家无事，又动起了学拳的念头。</p>
<p>第三位师傅是李承驿，据说是叶系梁挺一脉。</p>
<p>体验课前我说以前没接触过咏春，打套路时我还刻意显得很不熟练，但课后李师傅又直接问我以前在哪里学的拳。</p>
<p>我很疑惑但又不好意思直接问：</p>
<p>你到底是怎么看出来的？</p>
<h2 id="（四）回归"><a href="#（四）回归" class="headerlink" title="（四）回归"></a>（四）回归</h2><p>第四位师傅叫陆晓明，叶系卢文锦一脉。</p>
<p>武馆藏在上海一家废弃的造纸厂内，装修颇有风格。</p>
<p>去上的第一堂课，距离我中断咏春练习已一年有余。</p>
<p>陆师傅陪妻女出国度假，是一个不知名的师兄代的课。</p>
<p>体能热身半小时，强度非常大，期间吓跑了两个前来体验的姑娘。</p>
<p>两个姑娘面容身材非常好，本东感到非常可惜，但按下不表。</p>
<p>师兄问我以前是否接触过咏春，我说练过，但我想从头学起。</p>
<h2 id="（五）沪漂"><a href="#（五）沪漂" class="headerlink" title="（五）沪漂"></a>（五）沪漂</h2><p>造纸厂两月有余，始终不见陆师傅踪影。</p>
<p>后被告知，陆已携全家移民美国。</p>
<p>师兄弟们想把拳馆继续开下去，但所凑学费竟无法覆盖高额房租。</p>
<p>原来陆师傅多年教拳，一直在倒贴。</p>
<p>上海的房价，不知摧毁了多少行业的希望，和沪漂们的理想。</p>
<h2 id="（六）老外"><a href="#（六）老外" class="headerlink" title="（六）老外"></a>（六）老外</h2><p>白麒柏，Kleber，是我的第五位师傅。</p>
<p>师承叶系黄淳梁一脉，温鉴良。</p>
<p>老白生在意大利，自幼爱好舞枪弄棍，28岁时已自认为咏春拳小有所成。</p>
<p>适逢70岁的温师公欧洲讲学，切磋间随手就把自我感觉良好的老白给扔了出去。</p>
<p>于是这位心理学博士毅然辞去了高薪工作，抛弃了未婚妻，跑到香港拜师，从头学起。</p>
<p>八年后学成，听从师公的建议，来到上海开馆。</p>
<p>造纸厂之后我一直在寻找其他拳馆，后经一位武汉拳师推荐，一个英文不好的中国人和一个中文不好的外国人就这么奇怪的相遇了。</p>
<p>周中三节课，每晚我要花近3个小时来回，穿越大半个上海。</p>
<p>老白教拳用英文，好在人多，经常有好心人帮忙翻译，拳理也能听个大概。</p>
<p>常用的词也就那几个，慢慢的连说带比划竟也能顺畅交流。</p>
<p>“diagonal”和“coordination”是他最常说的词，可能这也是这一脉的特点所在。</p>
<p>而这一次没有坚持学下去，原因在于我。</p>
<p>“路途远、闹分手、要备考、手头紧、工作忙”都成了我的借口。</p>
<p>事情一多，心就乱了。</p>
<h2 id="（七）意外"><a href="#（七）意外" class="headerlink" title="（七）意外"></a>（七）意外</h2><p>一晃又三年。</p>
<p>三年里发生了很多事。</p>
<p>上海结婚买房安了家，是意外之喜。</p>
<p>工作上三起三落，身体也出了问题，是意外之悲。</p>
<p>养病期间，想起了久违的老伙计。</p>
<p>于是开马，冲拳。</p>
<p>久别重逢见众生。</p>
<p>而小念头，我已经全忘了。</p>
<h2 id="（八）练心"><a href="#（八）练心" class="headerlink" title="（八）练心"></a>（八）练心</h2><p>练拳即练心，心成则拳成。</p>
<p>“凭一口气，点一盏灯。要知道念念不忘必有回响，有灯，就有人。”</p>
<p>这句话出自电影《一代宗师》，我把它写进了硕士毕业论文的致谢部分。</p>
<p>我二十三岁学拳，历经西安，长沙，大连，最后到上海，能坚持下来，凭的就是这句话。</p>
<p>那时无论如何也不会想到，咏春拳会成为我生命的全部。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>咏春拳</tag>
      </tags>
  </entry>
  <entry>
    <title>对伪心理学说不</title>
    <url>/2021/05/29/%E5%AF%B9%E4%BC%AA%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%B4%E4%B8%8D/</url>
    <content><![CDATA[<h2 id="0x00-读后感"><a href="#0x00-读后感" class="headerlink" title="0x00 读后感"></a>0x00 读后感</h2><p>这是一本心理学科普书 <a href="https://item.jd.com/10861417.html">详情戳我</a>，不足之处是有些章节的翻译太过生硬，像如下的句子随处可见：</p>
<blockquote>
<p>“更重要的原因是，作为一名大学心理学的教师，我不得不承认我和同事们也不总能引导初学者对心理学这门科学产生一个正确的认识。”<br>但瑕不掩瑜，内容还是相当好的，颇有拨乱反正之感。作者用了大部分篇幅讲了什么是真正的心理学，最后盘点了市面上常见的三类心理学书籍：</p>
</blockquote>
<ol>
<li>心理学早期著作，如弗洛伊德、荣格、华生、斯金纳等等，这些理论早已不能代表当代心理学的水平。而心理学前沿理论，比如认知神经科学方面的著作常被归为生物学或者生理学。</li>
<li>伪装成心理学的玄学书，充斥着超自然现象，比如心灵感应、转世、通灵术等等。</li>
<li>最常见的是自助类读物。这里面包括成功学的鸡汤文（某耐基），还有声称自己发明了一些新疗法，可以矫治特殊行为问题，或者帮助读者赚钱、减肥、提高性能力等等，这一类书往往能大卖。</li>
</ol>
<blockquote>
<p>图书出版是一种商业行为，市场的力量决定了什么读物可以摆在书店的书架上。</p>
</blockquote>
<p>心理学是一门非常诱人的交叉学科，内容极其丰富，初学者往往无从下手。我一开始也是走了很多弯路，看了很多乱七八糟的伪心理学书，最后不得已求助于心理学专业的朋友，才慢慢揭开了这门学科的神秘面纱。<br>以下是我的读书笔记，更多精彩内容，我们择日再续。</p>
<h2 id="0x02-读书笔记"><a href="#0x02-读书笔记" class="headerlink" title="0x02 读书笔记"></a>0x02 读书笔记</h2><h3 id="2-1-绪论"><a href="#2-1-绪论" class="headerlink" title="2.1 绪论"></a>2.1 绪论</h3><ul>
<li>心理学的主题广泛，又相对松散，用科学方法来理解行为，从而实现学科统一。</li>
<li>心理学是科学，因为其满足科学的三个特征：实证主义、可证伪性和可重复性。</li>
</ul>
<h3 id="2-2-可证伪性"><a href="#2-2-可证伪性" class="headerlink" title="2.2 可证伪性"></a>2.2 可证伪性</h3><ul>
<li>科学理论是一组具有内在联系的概念，其能对一组数据作出解释，并对未来实验的结果作出预测。</li>
<li>通过由被证伪的预测所引发的理论修正，科学才能逐步逼向真理。</li>
<li>精神分析理论不可被证伪！</li>
</ul>
<h3 id="2-3-操作性定义"><a href="#2-3-操作性定义" class="headerlink" title="2.3 操作性定义"></a>2.3 操作性定义</h3><ul>
<li>操作性定义是利用可观测的操作对概念进行定义。</li>
<li>操作性定义使科学知识变得公开可检验。</li>
<li>心理学需要对术语进行操作性定义，同样无法回答本质性问题。</li>
</ul>
<h3 id="2-4-个案研究和见证叙述"><a href="#2-4-个案研究和见证叙述" class="headerlink" title="2.4 个案研究和见证叙述"></a>2.4 个案研究和见证叙述</h3><ul>
<li> 安慰剂效应，鲜活性效应和巴纳姆效应使得个案研究和见证叙述作为评估心理学理论和治疗效果的证据是毫无价值的，因此手相学，星座理论和精神分析理论都是伪科学。<blockquote>
<p> 我曾长期受到弗洛伊德理论的困扰，我甚至认为弗洛伊德对现代社会的荼毒要远大于卡耐基式的心灵鸡汤。</p>
</blockquote>
</li>
</ul>
<h3 id="2-5-相关和因果"><a href="#2-5-相关和因果" class="headerlink" title="2.5 相关和因果"></a>2.5 相关和因果</h3><ul>
<li>两个变量之间的强相关性不能说明二者之间存在因果关系。</li>
<li>即使两变量有直接的因果关系，也无法根据相关来判断谁是因谁是果。</li>
<li>样本数据选择性偏差造成了许多虚假相关。</li>
</ul>
<h3 id="2-6-控制实验"><a href="#2-6-控制实验" class="headerlink" title="2.6 控制实验"></a>2.6 控制实验</h3><ul>
<li>人类关于行为的直觉理论存在理论缺陷，因此心理学研究需要对实验进行控制，有时需要创设特殊条件进行单因素实验。</li>
</ul>
<h3 id="2-7-心理学的人为性"><a href="#2-7-心理学的人为性" class="headerlink" title="2.7 心理学的人为性"></a>2.7 心理学的人为性</h3><ul>
<li>大多数心理学研究属于基础性研究，样本的随机性和条件的代表性不是关键问题，因为其研究重点在于验证理论的普遍性，人为创设条件有利于这类单因素实验的进行。</li>
</ul>
<h3 id="2-8-关联性和聚合性原则"><a href="#2-8-关联性和聚合性原则" class="headerlink" title="2.8 关联性和聚合性原则"></a>2.8 关联性和聚合性原则</h3><ul>
<li>心理学同样遵循关联性原则，即新的理论不仅能解释新的数据，还能解释已有的数据。</li>
<li>心理学的研究成果的整合遵循聚合性原则，即大部分结论并不是基于单一的实验数据，而是在收集并比较了大量的研究数据之后得到的。</li>
</ul>
<h3 id="2-9-多重原因"><a href="#2-9-多重原因" class="headerlink" title="2.9 多重原因"></a>2.9 多重原因</h3><ul>
<li>人类大部分复杂行为都是由多重原因所决定。</li>
<li>变量共同作用的整体效应与单独作用效果不同（即系统涌现性）。</li>
</ul>
<h3 id="2-10-概率推理"><a href="#2-10-概率推理" class="headerlink" title="2.10 概率推理"></a>2.10 概率推理</h3><ul>
<li>心理学所揭示的事实和关系都是用概率来表述的。</li>
<li>大样本能提供对总体特征更为准确的估计（大数定律和中心极限定理）。</li>
</ul>
<h3 id="2-11-偶然性"><a href="#2-11-偶然性" class="headerlink" title="2.11 偶然性"></a>2.11 偶然性</h3><ul>
<li>行为的变化有一部分是随机因素作用的结果，因此心理学家不应该自称能够预测每一例个案的行为。</li>
<li>在解释人类行为的原因方面，统计预测远远优于临床预测。</li>
</ul>
<h3 id="2-12-结束语"><a href="#2-12-结束语" class="headerlink" title="2.12 结束语"></a>2.12 结束语</h3><ul>
<li>心理学家研究的事可解的实证问题，通过提出可证伪的理论来解释研究发现，理论中的概念都具有操作性定义，实验受人为控制和操纵，研究成果的整合遵循聚合性原则，并且相关数据和结论只有经过同行评审后才能被认可，且允许其他学者复现并提出批评。最终被解释的行为规律一般是概率关系。</li>
</ul>
]]></content>
      <categories>
        <category>心理学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>投资的三个基本问题</title>
    <url>/2021/05/26/%E6%8A%95%E8%B5%84%E7%9A%84%E4%B8%89%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><ol>
<li>投资是什么？投资就是用钱生钱。</li>
<li>为什么要投资？因为货币每年都在贬值。</li>
<li>投资投什么？常见的投资品种有实业、房产、收藏品和金融产品。</li>
</ol>
<h2 id="0x01-投资是什么"><a href="#0x01-投资是什么" class="headerlink" title="0x01 投资是什么"></a>0x01 投资是什么</h2><h3 id="1-1-投资就是钱生钱"><a href="#1-1-投资就是钱生钱" class="headerlink" title="1.1 投资就是钱生钱"></a>1.1 投资就是钱生钱</h3><p>先来看学院派对投资的定义：</p>
<blockquote>
<p>投资是特定经济主体为了在未来可预见的时期内获得收益或是资金增值，在一定时期内向一定领域投放足够数额的资金或实物的货币等价物的经济行为。</p>
</blockquote>
<p>翻译成中文就是：<strong>投资就是用钱生钱的过程</strong>。实现钱生钱有两种方式，一种是你买了一个东西，过段时间再卖掉，赚个价差（花30万买套房子，10年后以100万卖掉，赚70万左右）；另一种方式是你买了个东西，不用卖掉，东西放你手里也能帮你赚钱（买套房子出租，每月收租3000块）。当然有些东西和房子一样同时拥有两种生钱方式（在“投资投什么”部分会展开讲）。</p>
<p>市面上常见的用于投资的物品主要集中于第一种，即<strong>交易产生价格变动</strong>。能够交易的物品同时具有两种属性：<strong>稀有性</strong>和<strong>流动性</strong>。俗话说“物以稀为贵”，比如黄金白银，王羲之的字帖，汤臣一品的豪宅等等；东西光稀有还不行，还得有一撮人一致认定这玩意儿具有炒作价值才行，你比如这两年AJ的鞋子价格被炒得很高，但是李宁出个限量款鞋子可能就不会有多少人来炒。流动性说白了就是有人关注，形成了交易市场，有买有卖，物品在这个市场的人手中不停地交易、流动。交易的过程就是击鼓传花的游戏，你手里的货高价出手后才是真正赚到了钱，这叫落袋为安，否则永远只是“纸上富贵”，浮动盈亏。</p>
<h3 id="1-2-投资不是赌博"><a href="#1-2-投资不是赌博" class="headerlink" title="1.2 投资不是赌博"></a>1.2 投资不是赌博</h3><p>需要指出，交易和赌博还是有区别的。<strong>赌博是典型的“零和博弈”</strong>，好比四个人各揣了一包现金来打麻将，现金加起来总共10万块，那么一场牌局下来，四个人兜里的钱加起来还是10万块。你赚钱了，就一定有人亏钱，这叫“只改变钱的分配方式，不会生出钱也不会减少钱”。交易则不同，<strong>交易是所谓的“单边市”</strong>，在理想情况下，市场里的所有人都极度乐观，认为物品价格会一直上涨，那么所有人都会赚钱。就像滚雪球一样，市场里的钱会越滚越多（实际上基本不可能，因为价格围绕价值波动）。</p>
<h3 id="1-3-投资就是投机"><a href="#1-3-投资就是投机" class="headerlink" title="1.3 投资就是投机"></a>1.3 投资就是投机</h3><p>网上有很多人从各种角度尝试去区分这两个概念，比如从时间尺度上来看，频繁地进行房屋买卖，这种短期的交易是投机行为，而买房长期持有，出租给别人属于投资。但在笔者看来是这样区分没意义的，因为从“钱生钱”的角度来看，投资就是投机，二者没有区别。最大的区别可能就是一个是普通话，一个是广东话（笑）。</p>
<h3 id="1-4-成交量与成交价"><a href="#1-4-成交量与成交价" class="headerlink" title="1.4 成交量与成交价"></a>1.4 成交量与成交价</h3><p>前文说过，投资的主要方式是通过交易产生价格变动。而成交价格与成交量，也就是成交次数关系密切。正常情况下交易价格必须随着成交量的扩大而上涨（价随量升），但价格下降则不依赖于成交量（没人接盘，卖家又急于出手，就只能不断降低售价）。</p>
<h3 id="1-5-投资有风险"><a href="#1-5-投资有风险" class="headerlink" title="1.5 投资有风险"></a>1.5 投资有风险</h3><p>投资能赚钱，也有可能亏钱。还是说交易，想象你买了一件古董，准备转手卖掉赚一笔。卖出的差价就是你的收益。高价卖出你就赚到了钱；低价卖出你就亏了钱（负收益）。接着我问你有几成把握可以赚到钱，你想了想说大概6成吧，那么“40%可能要亏钱”就是这笔投资的风险。所以收益说的是你能赚到多少钱，风险是这笔投资有多大可能性要亏钱。</p>
<p>当然刚才说的只是风险最初的含义，强调的是风险可能带来的损失。后来金融学将风险的概念扩展为“收益的波动性”，高风险指的是收益的波动大，说白了，往低了波动就是血本无归，往高了波动就是一夜暴富，但是具体往哪儿波动呢，不好说；而低风险就是收益的波动小，不管它往上还是往下蹦跶，赚也赚不了多少，赔也赔不了多少。而人们常说的“高风险带来高收益”，其实是对“资本市场线”这一概念的误读（了解即可）。正确的说法应该是“低风险低收益，<strong>高风险既可能带来高收益，也可能有高额损失</strong>”。下面举一个高风险的例子。</p>
<p>听说鹿娢演唱会门票值钱，于是假设作为黑粉的我在网上花了8千块钱抢到了一张，打算加点钱转手卖掉。那么我的这笔投资面临以下几种可能：</p>
<ol>
<li>采用公开叫卖方式出售，价高者得。最后如愿高价卖出，赚到的钱上不封顶。</li>
<li>公开叫卖，没人愿意买，为了赶在演唱会开始前出手，我最后只能低价贱卖，最后小亏。</li>
<li>低价贱卖也没人愿意买，又因为假设我是黑粉，不可能自己去看，最后8千块投资血本无归。</li>
</ol>
<p>根据前面一节的分析，这笔投资的收益波动性很大，理论上赚到的钱上不封顶，如果亏钱了那也可能血本无归，所以属于高风险投资。而在之前提过交易和赌博的区别，高风险投资也不能算是赌博，即使血本无归，手里至少还落了张门票，送人也能得个人情。</p>
<h2 id="0x02-为什么要投资"><a href="#0x02-为什么要投资" class="headerlink" title="0x02 为什么要投资"></a>0x02 为什么要投资</h2><h3 id="2-1-钱不值钱了"><a href="#2-1-钱不值钱了" class="headerlink" title="2.1 钱不值钱了"></a>2.1 钱不值钱了</h3><p>现在我们知道了投资就是钱生钱的过程，钱生钱有两种方式，其中主要的一种就是通过交易产生价格变动，能够通过交易变动价格的物品需要同时具有稀有性和流动性。交易和赌博不同，与成交量关系密切。我们还知道了投资中收益伴随着风险。</p>
<p>既然投资有风险，可能亏钱不说，还有可能血本无归，那么我们为什么要投资，好好活着不好吗？那是因为钱越来越不“值钱”了。</p>
<p>“钱不值钱”是什么意思呢？同样是7块钱，1980年可以买到1瓶茅台酒，而在40年后的今天，甚至买不到一根梦龙雪糕（即使很难吃）。老话讲叫钱变“毛”了，就是贬值的意思。</p>
<p>那么是什么决定了你手里的7块钱能买到多少东西呢？一是市面上有多少钱，二是市面上有多少货。钱货相等，物价不变；钱多货少，物价就涨，7块钱买不到一根雪糕，那钱就不值钱了，这就叫通货膨胀；钱少货多，物价就跌，7块钱有可能买到1箱茅台，这是通货紧缩。下面就分别从“钱”和“货”两方面展开讨论。</p>
<h3 id="2-2-市面上有多少货"><a href="#2-2-市面上有多少货" class="headerlink" title="2.2 市面上有多少货"></a>2.2 市面上有多少货</h3><p>钱的事有些复杂，等会儿再说，先看市面上有多少货。前文提过投资的主要方式是交易产生价格变动，那交易其实就是俗话说的“一手交钱一手交货”。能用来换钱的东西称之为“货”，有些“货”看得见摸得着（鹿娢演唱会门票），而有些看不见摸不到，比如你去便利店打零工，1小时赚了100块，类似于这种“你帮别人干点啥，别人给你钱”的形式，其实也符合交易的实质，所以提供给别人的有偿服务，也可以算作是“货”的一种。回过头再看投资的另一种方式，房东租房赚租金，房东提供给租客住房的服务，租客付钱，也是“以钱换货”，因此也属于交易。现在我们可以说，投资就是交易，但交易不一定是投资。倒卖演唱会门票属于投资，但你从商场买了瓶可乐属于交易，回家咣叽喝掉了那肯定不是投资咯。</p>
<p>现在我们知道了市面上用于交易的货不光包括物品，还包括服务，那么如何衡量市面上有多少货呢？<strong>实际上很难统计市面上到底有多少货在流通</strong>。让我们用货物从生产到流通的过程来说明这个问题。想象下，饮料厂生产可乐，然后商场从饮料厂进货，最后你从商场花了3块钱买了一瓶可乐。当你正美滋滋地往家走呢，突然冲出来一个小胖子，说要花6块钱买你的可乐，如果你卖给他了，这瓶可乐就等于在市面上继续流通；那如果你不卖给他，坚持回家喝掉，那么自打从你在商场结账的那一刻起，这瓶可乐就退出了流通市场。</p>
<p>虽然不知道市面上实际有多少“可乐”在流通，不过从饮料厂那儿是可以知道最近新生产了多少瓶可乐，即市面上新增了多少货。其实国家每隔一段时间就会统计国内市场新增了多少“货”，再按市场价把每种“货”加起来，算出来总共值多少钱。这个数字就是人们常说的<strong>GDP（国内生产总值）</strong>。</p>
<p>需要注意，<strong>GDP圈定的是市场范围，而不是人</strong>。贾跃停是中国人，跑去美国造的汽车就不能算在中国的GDP里，那是为美国GDP做贡献了；宋慧桥在中国拍电影，片酬就得算到中国的GDP里。</p>
<p>另外不能脱离时间来谈GDP。GDP数据都是有时间范围的，比如中国有季度和年度GDP，具体数据可以在国家统计局网站查看（近几年GDP的增长速度均为6%-7%）。</p>
<h3 id="2-3-市面上有多少钱"><a href="#2-3-市面上有多少钱" class="headerlink" title="2.3 市面上有多少钱"></a>2.3 市面上有多少钱</h3><p>我国的法定货币是人民币。2020年6月，投放到市面上的人民币总量约213万亿元，主要包括老百姓和企业手里的现金和银行存款，这个数叫<strong>广义货币供应量（M2）</strong>。</p>
<p>货币供应量就是指某月某日在银行下班那个时刻市面上所有现金和存款之和。所谓2020年6月的货币供应量就是用6月中每天的货币量求了个平均数，也就是6月平均每天市面上有多少钱。那么M2是什么意思呢？我国把货币分成了三层，现金总量叫M0，现金和活期存款总量叫M1，现金、活期和定期存款总量称为M2。</p>
<p>现在想要知道市面上有多少钱就去查M2数据就行了，目前M2的最新数据是213万亿元。那么说这213万亿元人民币都是国家印出来的吗？并不是，这涉及到货币的发行和流通机制，下面简单讲讲。</p>
<h3 id="2-4-国家是怎样印钱的"><a href="#2-4-国家是怎样印钱的" class="headerlink" title="2.4 国家是怎样印钱的"></a>2.4 国家是怎样印钱的</h3><p>我们国家印钱和管钱的单位叫“中国人民银行”，也叫“<strong>央行</strong>”。跟国防部、发改委一样，央行是国务院的组成部门之一，正经的国家机构（总行是公务员制，分行是事业编）。央行印的人民币不能直接投放到市场，需要先借给商业银行，再由商业银行借给企业或个人。</p>
<p>假设央行印了一沓新钱（基础货币），借给了商业银行，商业银行把钱又借给了某个企业，企业取出了一部分钱用来生产和运作，剩下的还存在银行里，银行再从这部分钱里再抽一部分存回央行，作为存款准备金（央行要求的），那么剩下的钱银行还可以再继续借给其他人。不断地重复这个过程，央行印的这笔基础货币就被派生出了新的钱，派生出的新钱就是货币供应量M2。他俩之间是个倍数关系，倍数叫货币乘数，即：<strong>货币供应量M2 = 基础货币 * 货币乘数</strong>。</p>
<p>那么央行印钱是随便印的吗？那指定不是。<strong>央行发行多少货币不是由国家决定的，而是由市场决定的。</strong>通常在两种情况下需要印钱，一是企业/个人赚到了美元这样的外汇，找商业银行兑换成人民币，商业银行又拿着外汇去找央行换人民币，央行在收到外汇以后，按照汇率结算对应价值的人民币给商业银行，这就算发行了一笔人民币；另一种情况就是刚才讨论的借钱给商业银行，其实借钱的时候就等于是发行了对应价值的人民币，而借钱的方式五花八门，比如逆回购等等。</p>
<p>需要指出，<strong>央行虽然不直接决定发行多少货币，但可以调控场内货币数量。</strong>刚才提到，央行印钱主要是由于两种原因，外汇流入和借钱给商业银行。如果外汇流入的少，而央行又想多印钱，那就多借钱给商业银行就好了；但如果外汇大量流入，导致货币供应量M2短期内上升过快，央行就可以采取一些手段来减少M2（提高法定存款准备金率或者公开市场操作）。</p>
<p>刚才讨论的差不多是这个意思：</p>
<p><img src="https://i.loli.net/2021/05/26/W2Avn7SkUR8pDV4.jpg" alt="货币派生.jpg"></p>
<h3 id="2-5-我国通胀的速度到底是多少"><a href="#2-5-我国通胀的速度到底是多少" class="headerlink" title="2.5 我国通胀的速度到底是多少"></a>2.5 我国通胀的速度到底是多少</h3><p>前文提到，市场中钱多货少，导致钱贬值，引发物价上涨，这个现象叫通货膨胀。那么每年中国通货膨胀的速度是多少呢？这个数字一直存在争议。先来看官方给出的数据。</p>
<p>官方认为通货膨胀最终引发的是物价上涨，因此使用物价的变化表示通货膨胀的程度。一般用<strong>CPI（居民消费品价格指数）</strong>反映物价变化。比如2019年中国的CPI为102.9，这是个相对数，意思是2019年的物价总体上比2018年上涨了2.9%。也就是说，你在2018年花100块钱买的东西，2019年需要102块9毛才能买到；反过来，你在2018年赚了100块钱，瞒着老婆藏在了床头柜里，一年以后想拿出来嗨皮，却发现只剩97块钱了 T~T。</p>
<p>中国官方CPI最让人诟病的是，虽然它包含了掏空老百姓钱包的“三座大山”里的医疗和教育费用，但最重要的购房价格没被纳入其中。所以老百姓一直不接受官方给出的数字，认为比真实情况要低太多了。</p>
<p>有些自媒体说近几年的通货膨胀率在8%左右，咱也不知道这数据是怎么来的。不过这跟老百姓平常谈论的数字是差不多的。那为什么会有8%这个数字出现呢?一种合理的解释是，最近几年的货币供应量的年增长速度差不多是8%，而人们把货币供应量的增速直接当成通货膨胀速度了。之前说钱多货少，引发物价上涨，但钱到物价的传递过程很复杂，并不是市场多出来1块钱，物价就涨1块，所以笔者认为8%这个数字不合理，是偏高的。</p>
<p>还有人尝试从不同角度推算出通货膨胀率的计算公式，比如从通货膨胀的定义出发，推导出了下面的公式：<br>$$<br>通货膨胀率 = M2增长率 - GDP增长率<br>$$<br>下图的红线是按上述方法计算的1994年到2019年的通货膨胀率。可以看到如果按这种方法计算，2009年的通胀率达到了19%，之后近10年的通胀率控制的都很好。</p>
<p><img src="https://i.loli.net/2021/05/26/nKiMRcsCBjTm4J8.png" alt="通货膨胀率对比.png"></p>
<p>但是这种计算方法的关键问题在于，<strong>M2和GDP是不同层次的概念</strong>。<strong>M2是某个时间点上的数据</strong>，也就是说M2数据其实是某天某一时刻市面上有多少钱的统计，而年度M2数据其实是当年所有M2数据的<strong>平均值</strong>（再怎么平均也还是一个时间点上的数据）；而<strong>GDP是某个时间段的数据</strong>，年度GDP数据是指当年这段时间内市面上新增了多少货，是当年四个季度GDP的<strong>累加值</strong>。所以并不能直接相减，减出来的结果是2019年通货膨胀率是2.6%，甚至比官方认定的2.9%还低，显然是不合理的。</p>
<p>那么说了半天，中国真正的通货膨胀率究竟是多少呢？根据之前的讨论，虽然没办法精确计算出来，但不会影响之后的讨论，我们姑且可以认为<strong>中国每年的通胀率介于CPI与M2增速之间</strong>。2019年度CPI为2.9%，M2增速为8.1%，那么我们可以认为当年的通胀率大于2.9%且小于8.1%，简单做个平均，通胀率大概是5.5%。</p>
<h3 id="2-6-先定个小目标：跑赢通胀率"><a href="#2-6-先定个小目标：跑赢通胀率" class="headerlink" title="2.6 先定个小目标：跑赢通胀率"></a>2.6 先定个小目标：跑赢通胀率</h3><p>现在我们知道了投资就是要让钱生钱，之所以要投资是因为钱每年都在贬值，贬值的速度叫通货膨胀率。先想办法让你投资的收益率超过通胀率，你的钱才是保值的，其次才是如何合理增值。通胀率可以参考官方认定的CPI，也可以用本文提出的CPI与M2增速的平均值。</p>
<p>大家都想让投资收益率越高越好，不过别忘了之前说的，高收益伴随着高风险，风险越高投资收益的波动越大，其中利弊还得各位看官自己权衡了。</p>
<h2 id="0x03-投资投什么"><a href="#0x03-投资投什么" class="headerlink" title="0x03 投资投什么"></a>0x03 投资投什么</h2><p>之前提到，投资就是交易，但交易不一定都是投资，用作投资的交易一般有两种，一种是通过买卖物品的价差赚钱（买卖房产），另一种是物品本身就能帮你赚钱（买房出租），这算是投资的固有属性。下面就结合投资属性讲讲市面上常见的投资品种，分为实业、房产、收藏品和金融投资，当然也会讲讲“投机倒把”，因为从某地方言的角度讲，“投资”就是“投机”。</p>
<h3 id="3-1-实业投资"><a href="#3-1-实业投资" class="headerlink" title="3.1 实业投资"></a>3.1 实业投资</h3><p>一般老百姓手里有点闲钱的时候都会琢磨“我得拿钱干点嘛呢？”，而大部分人首先想到的就是“干点儿小买卖吧！”。像类似摆摊卖化妆品、开个小烧烤店的“小买卖”，都属于实业投资。</p>
<p>下面这个图展现的是市面上大部分种类的商品从被生产出来开始，经过不断地在市场周转流通，最后被老百姓买回家里的全流程，也可以叫产业链。在这个流程里只要是参与了任何一个环节，我认为都应该算是实业投资。</p>
<p><img src="https://i.loli.net/2021/05/26/Qh1gTj4weanm9Fx.jpg" alt="实业投资.JPG"></p>
<p>让我们用化妆品产业链来解释这张图。玻尿酸是化妆品的原材料，那我们可以投资办厂，专门生产玻尿酸供货给化妆品企业，这就是原材料供应环节，你就是<strong>原材料供应商</strong>。当然你也可以直接办厂，从玻尿酸厂买原材料，自己生产化妆品，那你就是<strong>生产制造商</strong>。</p>
<p>你的化妆品厂干了一段时间，产品卖得还不错，其中一个叫“欧珀莱雅（OPLY）”的自主研发品牌卖得最好，但是产品的生产成本太高了，你就想把生产车间搬到乡下去，这样房租和人工费用就能压缩下来了。但是重新在乡下建厂的成本太高了，这时又恰好听说乡下就有一个化妆品的生产厂，你就去跟人家谈合作，由乡下的厂子替你生产OPLY的产品，赚的钱大家分（当然肯定是你拿大头了）。这样别人的厂子就是你的<strong>委托加工商</strong>，而你只需要负责品牌的经营维护，你就是<strong>品牌商</strong>。</p>
<p>前面说的几种投资都需要办厂，你说我没那么大的资金量，那么就不能在化妆品这个产业链上“分一杯羹”了吗？当然不是，刚才说的都属于生产环节，现在来看销售环节。当欧珀莱雅的货生产出来以后，厂家没那么多精力来解决市场竞争等问题，这时需要有人帮厂家来卖货，你就可以去谈合作，这样你拿到的就是一手货源，利润回报最高；当然你也可以找有一手货源的卖家拿货，利润肯定就没那么高了。以此类推，这个环节里的卖家有五花八门的头衔，什么代理商、分销商、经销商，我把他们统一称为<strong>中间商</strong>。</p>
<p>如果你说生产和销售环节我都不想参与，还能不能也“分一杯羹”呢？如果你有品牌商和中间商需要的资源就可以。那么什么是他们需要的资源呢？只要能帮助他们卖货就行。比如你是一个拥有百万粉丝的美妆领域自媒体博主，你就可以跟他们谈合作，商家出钱，你负责在网上发广告；或者你开了一家广告公司，能用相对便宜的价格拿下电视台黄金时段的广告权或者热门综艺节目的赞助权，那商家也会愿意跟你合作。如果你拥有的是这类资源，那么你就是<strong>信息渠道商</strong>。</p>
<p>还有一类渠道叫平台渠道，说白了就是有偿提供“场地”给商家卖货用。这个“场地”可以是线下的商场或者超市，也可以是淘宝网这类线上电商平台。当然如果你是美妆博主，可以开直播带货，也算是拥有平台资源。如果你拥有的是这类资源，那么你就是<strong>平台渠道商</strong>。</p>
<p>不管你参与了上述哪个环节，你都是拥有了某些资源，比如原材料供应商和生产制造商的厂房和生产线、平台渠道商的“场地”这类有形资源，又或者品牌商的品牌拥有权、中间商的销售权、信息渠道商的影响力这种无形资源。而就是这些资源在你手里，能帮你赚钱；并且资源本身也是可以交易的（生产设备考虑折旧问题一般需要贱卖）。那么对照之前所说，<strong>实业投资兼具投资的两种固有属性</strong>。</p>
<p><strong>实业投资的难度或者说门槛，取决于获取与维护相关资源的难度</strong>。投资难度越大，风险越高，相对应的投资回报可能会更高（别忘了风险指的是收益波动性，出现损失的可能性也越大）。</p>
<p>比如中间商的门槛在于能进货成本有多低，对应的利润就有多高，风险在于货卖不出去砸自己手里了。笔者有幸曾卖过一段时间某国产化妆品，作为一个低级代理商，深受上级代理和厂家的压榨。利润低不说，上家还要求“压货”（不管手里的货卖不卖得掉，必须定期完成进货任务）。压货可以把商品销售的风险从厂家和上级中间商转移到低级中间商，所以中间商的精力就慢慢从“如何卖货”转移到“如何发展下线”。发展下线的过程本质上和传销是一样的，主要方式是“杀熟”，等你进去了就变脸，各种卡扣。希望读者们以后遇到类似杀熟的情况一定要擦亮眼睛，提高警惕。</p>
<p>话赶话说到这儿，想谈谈中外文化的差别（<strong>读者可以直接看下一部分，因为已经跑题了</strong>）。中国人讲人情，老外讲契约，两者其实是对立的。就拿借钱来说，你借了我一笔钱，我说下个月一定还你，还要给你打欠条。你说不用打欠条，啥时候有钱了再还就行。你还觉得挺美，认为我欠你了一个人情，下次不光是用钱，其他地方也能用的到我。殊不知，如果你这么干了，你就是个二傻子（不幸的是笔者也曾是个二傻子），因为主动权已经完全落到了我的手里，钱我想还就还，不想还就可以不还，想什么时候还就什么时候还；找我帮忙我想帮就帮，不想帮就不帮。你这个人我大不了这辈子就不来往了，如果你跟我还是亲戚，你来找我要债，我还可以倒打一耙，出去败你名声，散你德行，说你为了钱不顾亲情。你去找官府评理吧，连个欠条都没有，这钱最后即使能要回来也是要大费周章。所以在笔者看来，人情是世界上最脆弱的东西。</p>
<p>契约是什么呢？契约就是人们达成一致后用来约束人们行为的东西，就是借钱的欠条字据，就是“依法治国”里面那个“法”。刚才借钱的例子足以说明，契约和人情是对立的。既要契约，又要人情，那就是当女表子还要立牌坊。笔者曾亲眼见到两个亲戚之间转让生产设备，合同都签了，过了两天卖家看到设备涨价了，觉得自己卖亏了，找买家要求改合同，买家碍于面子居然还答应了，真是亮瞎了笔者的眼。</p>
<h3 id="3-2-房产投资"><a href="#3-2-房产投资" class="headerlink" title="3.2 房产投资"></a>3.2 房产投资</h3><p>房子也是老百姓最熟悉的投资品之一，也是最具争议的投资品。近二十年来可谓是“几家欢喜几家愁”，因为它，有人陡然而富实现财务自由，有人后悔当初买少了或者买晚了，还有人观望到现在，一直没“上车”。</p>
<p>房子作为投资品的前提是它得先是商品，商品是有内在价值的，房子的内在价值就是它的居住属性。这里把住房和商铺区分开来，之前提过，商铺属于实业投资的“平台渠道”资源，本节提到的房产投资均指居住用房。</p>
<p>房子同时具有两种投资属性，可以出租赚钱，也可以出售卖钱。那么问题来了，你在卖房的时候，怎么证明这套房子是你的呢？或者说，卖房到底卖的是什么？</p>
<p><strong>能证明房子归属的叫不动产权证书</strong>。不动产证由当地不动产登记部门办理，可以证明房屋所有权和土地使用权。房屋所有权好理解，就是证明这个房子的主人是谁；为什么还要强调土地使用权呢？因为我国的土地都是国家的，你买的只是房子，房子下面的地只是国家借给你用一段时间，期限一般为70年（从房子建好开始算）。那要是这房子住满70年了呢？根据新颁布的民法典，交钱后自动续期。</p>
<p>其实房子并不是一开始就作为商品或者投资品流通的。1949年建国前土地和房子都是个人的，建国后全部收为国有，按计划统一分配住房（房子还是国家的，只是便宜租给你）；之后经过多次住房制度改革，时间来到1998年，“23号”文件出台，国家全面停止福利分房，实现居民住宅货币化、私有化、商品化，房地产行业就此迅猛发展；直到2016年底国家正式定调“房住不炒”（房子是用来住的，不是用来炒的），这场持续了20年的造富运动算是暂时告一段落了。</p>
<p>现在来看高房价造就的产业链：</p>
<p><img src="https://i.loli.net/2021/05/26/9xh8HaWbLQ12ANq.jpg" alt="房产产业链.JPG"></p>
<p>政府“卖地”给房地产开发商，实际上卖的是一定年限的土地使用权，开发商盖好房子卖给个人，作为房主的你可以选择出租或者出售。而因为房价实在是涨的太高太快，于是最后的出租和出售环节又催生出了两个“中间商”职业，房产中介和二房东。</p>
<p>房产中介相信很多人都不陌生，就是在房主和租客/买家中间起到牵线搭桥的作用，提供的是有偿服务，除了人工基本没什么成本。传统的房产中介其实就是纯体力劳动者，赚的是个辛苦钱。后来有一些中介不满足于给“李嘉诚”们打工，想自己当“李嘉诚”来剥削穷苦大众，于是用低价从房主手里租来房子，化整为零隔出一个个单间，或者一个房间里摆上三张上下铺，再将单间或床铺出租，这样收的租金比付的租金多的多，还按月实现了稳定的盈利。这些低价租了别人的房子再高价出租的人就叫二房东。当然除了中介也有其他个人在从事这个行业，笔者以前租过二房东的房子，据她自己讲，她手里有100多套类似的房子。</p>
<p>利润越高的行业竞争压力就越大。随着二房东市场竞争越来越激烈，为了扩大资金量，拿到更多的一手房源，一些二房东搞出了叫“租金贷”的玩意儿。正常情况下是租客跟二房东签订租房合同，租客把房租付给二房东，二房东再把其中一部分付给房主。所谓的租金贷就是二房东诱导租客跟金融机构签合同，签的不是租房合同，而是贷款合同，由金融机构替租客将一年房租付给二房东，租客每月向金融机构还款，而二房东拿到一年的房租后，只需要按季度付给房主低廉的房租即可，这样二房东手里就多出很多现金。那么他们要这么多现金干嘛呢？重复上面的过程，继续拿房，继续”租金贷”的骗局，为的是抢占市场份额，份额越多赚的钱就越多。而这个过程形成了一个资金链，风险极高，万一资金链断裂，二房东携款潜逃或者破产跑路，将会形成一个尴尬的路面：房主收不到房租，将房子收回，而租客无房可住，还要每月还要替二房东还贷款。</p>
<p>拆解完房产的产业链，现在回到一个关键的问题上：现在房产还值不值得投资？</p>
<p>讲这个问题之前，先得说清楚另一个问题：买房是不是投资？笔者看来，<strong>首房不是投资，二房才是</strong>。回顾一下，投资就是钱生钱，而你买了第一套房，如果自住，那这套房子不光不会给你赚到额外的钱，你还得交物业、水电、取暖、维修等等费用，是往外掏钱。你可能会说，过几年房价涨了我再把他卖掉，不也赚钱了吗？关键在于假设的是你只有这一套房子，卖了你上哪儿住去，不还得买房子嘛。房价涨了你卖房是赚钱了不假，卖的贵你回头买的不也贵嘛。</p>
<p>那有的人就会说了，我买了第一套房子租出去，自己再租个房子，“以租养贷”不是很好吗？一般来说你赚的租金不足以覆盖你的房贷，另外你还多掏了一份房租，如果你付的房租和租客租你房子的房租一样，那你就属于瞎折腾；你付的房租少，说明你租的房子差，等于降低了你自己的居住体验；你付的房租多，等于提高了你还贷的成本，自己还要被租房的各种问题所困扰。</p>
<p>既然首房不算投资，那么在购买第一套房的时候只需要考虑房子的居住属性，而无需考虑投资属性。居住属性包括面积、朝向、楼层、采光、私密性、小区环境、交通、地段、周围基础设施等等，总之要自己住着舒服就行。</p>
<p>现在我们知道了首房不算投资，二房才算。假设你已经有了一套自住的房子，手里还有点闲钱，那么现在的行情适不适合买第二套用来投资呢？说白了，就是现在买房投资，以后会涨还是跌？</p>
<p>之前说过，房子作为商品，首先是有内在价值，这个内在价值就是房子的居住属性，会影响房价。其次是其投资价值会影响房价，说一件物品具有投资价值其实就是认定它以后会涨价，买的是预期。这个预期可能是小区边儿上以后会建学校、商圈、地铁车站等等。最后是国家政策面是否有利好或利空消息。“房地产短期看金融，中期看土地，长期看人口”说的其实都是政策面上的事。</p>
<p>影响房价的三个因素中，我认为最重要的就是政策面，代表着市场的风向和趋势。目前国家对于房地产的定位是“房住不炒”，同时又“因城施策”。说白了国家已经不允许炒房了，那为什么又“因城施策”呢？不让炒并不代表不让涨，要各地政府想办法引导房市回归理性，合理增值是可以的。但是不能搞得太过火，不然就要挨收拾（比如最近的深圳）。</p>
<p>国家近几年也想通过缴税的手段调控楼市，打击炒房客。土地增值税配合即将出台的房地产税，将会出现“关门打狗”的情形，对于手里有多套房的人，到时候卖也不是，不卖也不是，里外都得缴税（卖房需交土地增值税，继续持有需每年交房产税）。</p>
<p>既然政策上是“因城施策”，所以判断房价涨跌需要根据具体的城市来分析。后面会单开一课讲，此处按下不表。</p>
<h3 id="3-3-收藏品投资"><a href="#3-3-收藏品投资" class="headerlink" title="3.3 收藏品投资"></a>3.3 收藏品投资</h3><p>收藏品包括传统的字画，古玩玉器，邮票等，还包括现代的名车名表名包等高端限量奢侈品，还有年轻人玩的咱也不知道是啥的各种限量版的手办、球星卡、鞋子等等。作为交易性投资品，收藏品同样需要满足稀有性和流动性。如果有人告诉你有什么好的收藏品值得投资，你就需要从这两方面去考察：一是东西是不是稀有的，限量的（比如现在市面上绝大多数邮票的发行量巨大，根本不值得投资）；二是有没有人关注，愿意出更高的价买。说白了就是东西要“有价有市”，有价无市的藏品即使以后升值了，没有愿意接盘买，你还是没办法赚钱，最终落得个“纸上富贵”。另外藏品的稀有性还有一个大前提：藏品首先得是真的。</p>
<p>收藏品投资是笔者认为入行门槛最高的一种投资类型，需要投资者本身具有极强的鉴宝能力，毕竟现在的造假行业非常发达。在这一点上你没办法求助于任何人，因为任何人都有可能骗你，只能通过自身的学识和实践经验来判断藏品的真伪与价值。不过现在确实有很多免费的线上直播平台和线下的收费鉴定机构来辅助你鉴定藏品真伪，但那也只是事后鉴定。你要买件古董，难道能跟卖家说“劳驾，我先拿着您的这件宝贝找人鉴定下，如果是真的咱们再谈价钱”吗？</p>
<p>收藏品投资基本属于需要倒卖赚钱的投资类型，为什么说基本呢，有的人是靠买卖熟人的藏品打人情（电视剧《青瓷》里的张仲平），有的是为了洗钱，也有的是开博物馆赚取知名度（就不说是谁了）。但大部分都是靠倒卖赚钱。但藏品投资是笔者不推荐的，一是刚才说的鉴宝门槛高、难度大，对于藏品的真伪和真实价值都存在误判；二是藏品的投资回报期往往非常长，世间最痛苦的事情莫过于人死了钱没花完，如果你打算传给你的重孙子，那不妨试试藏品投资。</p>
<h3 id="3-4-投机倒把"><a href="#3-4-投机倒把" class="headerlink" title="3.4 投机倒把"></a>3.4 投机倒把</h3><p>“投机倒把”其实一开始说的是“二道贩子”，倒卖货物赚取价差。这要是搁在上个世纪80年代那可是犯法的，专门有个“投机倒把罪”。不过随着市场经济的放开，这个罪名在1997年就被撤销了，赚差价这件事也逐渐被人们所接受。</p>
<p>本文所说的“投机倒把”完全是贬义的，比如疫情期间囤货居奇，高价倒卖口罩等防疫物资大发国难财，以及春运期间恶意抢票并加价售卖导致农民工无票可买的行为。这些行为符合本文对于投资的定义，因此我也把它放到了投资品种这一部分来，但是造成了极坏的社会影响，为社会所不容。所以笔者明确建议不要做这类投资，不光是因为这有违道德，而且风险极大，因为虽然“投机倒把罪”被取消了，但你要是想发国难财，官府可有的是理由抓你。</p>
<h3 id="3-5-金融投资"><a href="#3-5-金融投资" class="headerlink" title="3.5 金融投资"></a>3.5 金融投资</h3><p>金融投资跟前面的投资类型都不一样，最大的特点是不参与实业，不接触实物，就纯粹地“玩钱”。像老百姓接触最多的存款和保险，还有经常听到但不知道到底是什么的股票、基金、债券、P2P、外汇、信托，也许听都没听过的期货、期权、权证等衍生品，笔者都将其纳入到金融投资的范畴。</p>
<p>其实这么多眼花缭乱的金融投资品可以分成几类：借钱给别人的，出钱入伙的，替你投资的，还有炒“币”的。</p>
<h4 id="3-5-1-借钱给别人"><a href="#3-5-1-借钱给别人" class="headerlink" title="3.5.1 借钱给别人"></a>3.5.1 借钱给别人</h4><p>当然肯定不是白借，得收好处费（利息）。双方约定到期归还本金，利息以一定形式支付。属于这类的金融产品有存款、债券、P2P。<strong>银行存款</strong>：钱存在银行等于是借钱给银行，到期后银行连本带利还给你。<strong>债券</strong>：如果你买了某个主体的债券，也是把钱借给这个主体，到期还钱，利息有可能是分期付给你。这个主体可以是政府（国债），可以是银行（金融债），也可以是企业（公司债）。屁吐屁（<strong>P2P</strong>，民间借贷）：P2P直译过来就是“个人借钱给个人”，同样是到期还本息。</p>
<p>第1类产品都是借钱，所以风险首先来自于到期以后借钱的人赖账不还。像政府和银行的公信力很强，基本不会赖账，但公司和个人就不一定了，如果到期还不了钱就得拿着你的“欠条”去寻求法律援助了。需要注意，欠你钱的是借款人，法律上讲借款平台跟你不存在债务关系。比如你在银行买了一笔某个公司的P2P，到期钱要不回来，那欠你钱的是这个公司，并不是银行。</p>
<p>除了赖账风险，这类产品还有流动性风险。存款也好债券也好，买了放在手里，本身就能吃利息。同时这里面有些东西本身也是可以买卖的，比如说债券，有人买了3年期的债券，但是想提前收回本金，于是想把债券加点钱卖掉；有人觉得债券的收益稳定，于是花钱买高价买了别人手里持有的债券，不过就是损失了点收益而已。有买有卖，价格就有涨有跌，于是就有了风险。</p>
<h4 id="3-5-2-出钱入伙"><a href="#3-5-2-出钱入伙" class="headerlink" title="3.5.2 出钱入伙"></a>3.5.2 出钱入伙</h4><p>实际就是股票。</p>
<p>举例来说明股票的本质到底是什么（例子做了最简化，真实情况要复杂的多）。我花了2000万开了家化妆品公司，这时公司就是我一个人的，赚的钱都是我的；化妆品行业竞争压力太大了，因此我想研发新产品，还需要2000万，当然发行债券来借钱是一种筹资方法，现在我们来看另一种方法，如何通过上市来拿到这笔钱。我以公司的名义公开发行2000万份股票，每份股票称为1股，每股1元钱；我之前投的那2000万也换算成2000万股，放在我自己手里。市面上任何人都可以买我家的股票，那买了股票有什么好处呢？</p>
<p><strong>股票代表着公司的所有权，所有权代表着公司赚了钱谁能来分钱</strong>。原来我花了2000万办了公司，那么公司100%的所有权都是我的，现在股民朋友们又我凑了2000万，那么我就让出公司一半的所有权给大家。原来公司赚了钱都是我一个人的，现在要拿出一半的利润给大家分。所以<strong>购买股票买的是公司以后赚的钱</strong>。</p>
<p>大家手里都有股票，都是公司的主人（股东），那听谁的呢？需要定期召开股东大会，你手里有多少股就给你多少票，有什么事儿投票决定。股东大会选出董事会成员来执行股东们的决议，董事会再选出经理层来负责公司日常经营；股东大会同时选出监事会，来看着董事会和经理层，不让他们作妖。</p>
<p>同样股票也是可以流通的，存在流通风险。除此之外，如果上市公司弄虚作假，严重损害股民利益，将会面临退市风险。</p>
<p>现在看看上市公司是如何坑害股民利益的。还是看刚才的例子，我说让股民给我掏2000万是为了研发新产品，但拿到钱以后我想怎么花怎么花，甚至可以“会所嫩模”的挥霍一空。公司上市时我没花1分钱拿到了2000万，并且我自己原有股份也获得了更高的流动性（当然也有一些股票限售规定，但上市之后肯定流通起来更加方便了），万一公司经营不善我还可以把手里的股票卖掉跑路。</p>
<p>下面简单讲讲由股票发展出来的其他玩法。</p>
<h5 id="3-5-2-1-可转债"><a href="#3-5-2-1-可转债" class="headerlink" title="3.5.2.1 可转债"></a>3.5.2.1 可转债</h5><p><strong>可转债</strong>（可转换公司债券）其实就是债券的一种类型，特殊就特殊在可债券能以预定价格转换为同一公司的股票，所以同时跟股市和债市挂着钩。</p>
<h5 id="3-5-2-2-融资融券"><a href="#3-5-2-2-融资融券" class="headerlink" title="3.5.2.2 融资融券"></a>3.5.2.2 融资融券</h5><p>融资就是跟券商（证券公司）借钱买入股票，等股价涨了再卖掉，还了钱剩下的就是你赚的；融券是跟券商先借股票卖出，等股价跌了再买入股票还给券商，这样还是赚到了差价。但实际上融资后有可能面临股价下跌，或者融券后股价上涨。券商怕你亏惨了还不了钱或股票，因此在开通两融业务前会让你先交一笔“保证金”（钱或者股票），如果你的浮动亏损过大，券商就会强行将保证金里和你手里的股票一起卖出，或者用保证金里的钱买入股票，确保它不亏钱，称为强行“平仓”。不过这样你手里就啥也没有了。</p>
<h5 id="3-5-2-3-期货期权"><a href="#3-5-2-3-期货期权" class="headerlink" title="3.5.2.3 期货期权"></a>3.5.2.3 期货期权</h5><p>期货一开始是指买卖双方到期按约定价格交易某种商品，卖方出货，买方出钱。后来演变为中间商的买卖双方关于某一标的物的对赌（不限于具体实物），以当前的交易价格为基准，赌未来的价格，中间商里的买家赌涨（买入期货合约），卖家赌跌（卖出期货合约）。到期交割差价（之前买入合约的到期前卖出合约，反之亦然，称为期货的“对冲平仓”），价格涨了买家赚，跌了卖家赚。这个过程中的标的物是棉花，黄金，还是股市大盘指数（反正股市整体的涨跌），已经不重要了。跟股市挂着钩的叫股指期货（股票指数期货），就是猜未来股市整体的涨跌，看跌的人只要不断卖出合约，看涨的人自然会买进。<strong>这段看不懂没关系，因为笔者认为期货交易不是投资而是赌博</strong>，是“多头”（看涨者）和“空头”（看跌者）玩的“零和游戏”，期货市场里你赚的钱就一定是别人亏的。</p>
<p>期权也是猜未来股市的涨跌，与期货最大的区别是，期权是买卖股票的权利，也就是说到期后你可以选择进行买卖，而期货在到期前必须进行交割。比如你现在买入看涨期权（对应的权利为1个月后从卖给你期权的人手里以10块钱的价格买入股票），如果到期后股票的市场价是20块，那卖你期权的人也必须以10块钱的价格卖给你股票，这样你就赚了10块；而如果1个月后股票跌到了5块钱，你觉得再用10块的价格买入太亏了，于是决定放弃使用买入股票的权利，那么你损失的只是当初购买看涨期权的费用。如果你会算命，推荐你选择期货和期权交易。</p>
<h4 id="3-5-3-替你投资"><a href="#3-5-3-替你投资" class="headerlink" title="3.5.3 替你投资"></a>3.5.3 替你投资</h4><p>这类产品包括基金和信托。</p>
<p>基金就是大家凑点钱干点什么事。凑钱用来投资的就叫投资基金，其中专门用来投资证券的就叫证券投资基金。证券就是前面说的股票，债券，以及期货期权等衍生品。市面上常见的基金都是证券投资基金。</p>
<p>我国的证券投资基金都是契约型的，也就是你和基金公司签合同，你出钱，基金公司帮你投资。但你的钱不是直接打给基金公司的，而是打给银行等第三方代为保管，基金公司再从银行拿钱投资（等于给你的钱加了一层保险）。</p>
<p><strong>基金运作的基础是按份额进行买卖</strong>。所谓的份额就是基金公司把他想要买的金融产品做了个组合，比如基金公司想把募集到的钱全部用来买股票，那么他就把要买的股票按比例组合好，按今天的收盘价计算下值多少钱，就是每份基金的净值。比如你今天买了1万块的某基金，刨去费用，按今天1.23的净值算你买到的是8064.51份该基金，每份基金对应着一定数量的股票组合。过了三个月，基金净值涨到了1.5，你把基金全卖了，实际上是把8064.51份基金按每份1块5的净值给卖掉了，刨去费用，你收回了大概12000块，等于你这笔投资赚到了2000块。</p>
<p>注意买卖基金实际上买卖的是基金份额，你赚的只是买卖基金的差价，即使该基金全部买了股票，你也并不持有股票，持有股票的是该基金。</p>
<p><strong>基金从本质上来讲是一种特殊的信托</strong>。所谓的信托就是你出钱，让某个机构帮你投资，但受益人可能不是你，可能是你的家人。而基金也是出钱让别人帮忙投资，但受益人是你自己。刚才说的基金只投证券市场，而信托还可以投实业，投资范围更广。</p>
<p>为什么富人们喜欢给子女买信托呢，假如你意外去世了，那么你的孩子并不能完全继承你的财产，得跟你的父母和妻子平分。父母还好说，毕竟是自己人，但是妻子就不一定了，有可能拿着分到的财产出去花天酒地，给你的孩子找个后爸天天虐待他，你说你能瞑目吗？但是你买个信托，受益人写你的孩子，那么他就有可能持续的获得收益。信托中出资人和受益人相分离在法律上是一种进步，就像公司的所有权和经营权相分离，从而出现股票一样。</p>
<h4 id="3-5-4-炒币"><a href="#3-5-4-炒币" class="headerlink" title="3.5.4 炒币"></a>3.5.4 炒币</h4><p>炒的“币”包括外汇，数字货币和黄金白银。</p>
<p>之前说过我国的法定货币是人民币，那世界上流通的还有其他国家的货币，像美元，英镑，泰铢等等，这些外国的“钱”相对于人民币叫做外汇。每种外汇和人民币都有个换算关系，叫做汇率。比如美元兑人民币汇率是6.9，意思是1美元能换6.9元人民币。</p>
<p>汇率是时刻变化的，美元兑人民币汇率降了，你用人民币就能换更多的美元；等汇率升了，你再换回来，这样更多美元就能换更加多的人民币，等于你投资赚钱了。所以炒外汇就是炒汇率。汇率的两头各有一个国家，两国的经济形势和政治局势都会对汇率的变化产生影响，因此非常复杂，个人很难把握。</p>
<p>以比特币为首的数字货币，在某些国家是可以当“钱”来花的（比如比特币在美国被认为是货币）。但是中国目前不承认比特币是货币（因为我国唯一法定货币是人民币），不过允许但不建议将比特币作为商品来进行投资（你细品）。数字货币的不可追踪性为网络犯罪提供了帮助，一个有意思的现象是，每当新的电脑勒索病毒出现后，比特币就大涨。</p>
<p>俗话说“乱世买黄金”，黄金白银等贵金属一直是作为“避险资产”存在，某种程度上来说算是国际货币，硬通货。买实物黄金和纸黄金各有优势，纸黄金就是你网上账户里的黄金，流通性好，不像实物黄金不易携带和交易，但是实物黄金是真的“避险”，万一打起仗来银行都没了，你上哪儿找你的纸黄金去，金子还是握在自己手里踏实。平时指望买卖黄金发财是基本不可能的，可以作为资产配置里的一部分，有黄金说明你的配置更均衡。一般出现天灾人祸、国际局势动荡的时候，黄金往往大涨。这些年黄金主要跟美元和石油挂钩，美元和油价跌，黄金一般会涨。</p>
<h3 id="3-6-保险？"><a href="#3-6-保险？" class="headerlink" title="3.6 保险？"></a>3.6 保险？</h3><p>最后想说说保险。其实保险不能算是投资，应该算赌博，实际上是投资者和保险公司的对赌。保险公司赌的是你大概率不出事，经过一系列复杂的计算，得出你应该交多少保费，才能保证他们不赔钱。这些年出现了一系列让人眼花缭乱的投资型保险，咱也不知道是啥，反正特点就是投资周期极长（一般3-10年），收益率一般，且赎回条件严苛。笔者认为如果将保险作为投资手段实在不是一个好的选择。</p>
<p>但保险也并不是一无是处，虽然不是好的投资项目，但却是合理的人身财产保障方式。买保险其实就是做“风险对冲”，就像世界杯决赛上作为法国铁杆球迷的我，压了2万块赌克罗地亚赢，法国队赢了我当然很开心，但如果克罗地亚夺冠这样的小概率事件发生了，起码我还赢了钱，不至于让我太难过。</p>
<p>讲到这里金融投资算是讲完了。金融投资在操作上是最简单的，动动手指，手机上点两下，就完成了一笔交易；但看似容易，实际上难度最大。</p>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>投资入门</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析</title>
    <url>/2021/05/31/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><ol>
<li>微积分的研究对象：函数</li>
<li>微积分的研究工具：极限</li>
<li>微积分 = 高中数学 + 极限 </li>
<li>微积分中最重要的公式 ：N-L公式</li>
<li>微积分 = 微分 + 积分 + N-L公式</li>
<li>数学分析 = 微积分 + 常微分方程 </li>
<li>多元微积分与一元微积分最本质的区别在于只有多元微积分具有外微分形式。</li>
</ol>
<p><a href="https://www.jianshu.com/p/86d4e3502e46">markdown数学表示</a></p>
<h2 id="0x01-极限"><a href="#0x01-极限" class="headerlink" title="0x01 极限"></a>0x01 极限</h2><h3 id="1-1-函数"><a href="#1-1-函数" class="headerlink" title="1.1 函数"></a>1.1 函数</h3><p><strong>定义1.1</strong> 设$X$, $Y$是两个非空数集, $f$是一个对应法则. 若对$x \in X$, 存在唯一确定的$y \in Y$与之对应, 则称$y$是$x$的函数. 记<br>$$<br>f:X \to Y, or \space \space y = f(x)<br>$$</p>
<p>1.2 极限</p>
<p>s1.3 函数极限</p>
<p>1.4 连续函数</p>
<p>1.5 一致连续</p>
<p>1.6 极限绪论</p>
<h2 id="0x02-一元微积分"><a href="#0x02-一元微积分" class="headerlink" title="0x02 一元微积分"></a>0x02 一元微积分</h2><p>2.1 微分</p>
<p>2.2积分</p>
<h2 id="0x03-级数"><a href="#0x03-级数" class="headerlink" title="0x03 级数"></a>0x03 级数</h2><p>3.1 数项级数</p>
<p>3.2 广义积分</p>
<p>3.3 函数项级数</p>
<h2 id="0x04-多元微积分"><a href="#0x04-多元微积分" class="headerlink" title="0x04 多元微积分"></a>0x04 多元微积分</h2><p>4.1 多元极限</p>
<p>4.2 多元微分</p>
<p>4.3 含参变量积分</p>
<p>4.4 多元积分</p>
<h2 id="0x05-函数行列式和函数相关"><a href="#0x05-函数行列式和函数相关" class="headerlink" title="0x05 函数行列式和函数相关"></a>0x05 函数行列式和函数相关</h2><h2 id="0x06-常微分方程"><a href="#0x06-常微分方程" class="headerlink" title="0x06 常微分方程"></a>0x06 常微分方程</h2><h2 id="0x07-初等数学公式"><a href="#0x07-初等数学公式" class="headerlink" title="0x07 初等数学公式"></a>0x07 初等数学公式</h2><h2 id="0x08-上极限"><a href="#0x08-上极限" class="headerlink" title="0x08 上极限"></a>0x08 上极限</h2><h2 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h2>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>普通心理学</title>
    <url>/2021/05/29/%E6%99%AE%E9%80%9A%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="0x01-心理学的研究对象和方法"><a href="#0x01-心理学的研究对象和方法" class="headerlink" title="0x01 心理学的研究对象和方法"></a>0x01 心理学的研究对象和方法</h2><h3 id="1-1-心理学是研究心理现象的科学"><a href="#1-1-心理学是研究心理现象的科学" class="headerlink" title="1.1 心理学是研究心理现象的科学"></a>1.1 心理学是研究心理现象的科学</h3><ul>
<li><p>心理学的研究对象是心理现象，包括人和动物的心理，主要研究前者.</p>
</li>
<li><p>人的心理分为个体心理和社会心理(个性和共性).</p>
</li>
<li><p>个体心理包括：认知(信息加工)、动机和情绪(行为动力和主观感受)、心理特性(能力和人格)三方面.</p>
</li>
<li><p>行为即对刺激的反应;心理支配行为,又通过行为表现;刺激 -&gt;心理 -&gt; 行为.</p>
</li>
<li><p>人与动物的心理区别在于人的心理具有意识的特点;人还有无意识现象.</p>
</li>
</ul>
<h3 id="1-2-心理学的任务"><a href="#1-2-心理学的任务" class="headerlink" title="1.2 心理学的任务"></a>1.2 心理学的任务</h3><ul>
<li><p>基本任务：探索和解释心理现象的规律，包括心理过程、心理结构、心理的脑机制、心理现象的发生和发展、心理与环境的关系.</p>
</li>
<li><p>意义：研究心理学在理论上有助于形成科学的世界观人生观；实践上有助于引导人的心理健康发展，预测和控制心理现象，指导不同领域的实践活动.</p>
</li>
<li><p>研究领域(学科分支)：普通心理学、生理心理学、发展心理学、教育心理学、医学心理学、工业心理学、军事心理学和社会心理学等.</p>
</li>
<li><p>中间科学：心理学的研究目标和方法偏自然科学，研究内容偏社会科学；优秀的心理学家需要兼具两方面的知识素养，神经科学、生理学、生物化学、生态学、物理学、数学、计算机和社会学、语言学、逻辑学、人类学等。</p>
</li>
</ul>
<blockquote>
<p>心理学相关职业介绍参考R.Sternberg《心理学职业生涯》一书.</p>
</blockquote>
<h3 id="1-3-心理学的研究方法"><a href="#1-3-心理学的研究方法" class="headerlink" title="1.3 心理学的研究方法"></a>1.3 心理学的研究方法</h3><ul>
<li>实验法：心理学是实验科学.</li>
<li>观察法：无法施加控制的情况下使用.</li>
<li>心理测验法：注意测验的信度和效度.</li>
<li>相关法：相关不能推出因果.</li>
<li>个案法：常用于提出理论或假设.</li>
</ul>
<h3 id="1-4-心理学的过去和现在"><a href="#1-4-心理学的过去和现在" class="headerlink" title="1.4 心理学的过去和现在"></a>1.4 心理学的过去和现在</h3><ul>
<li>诞生：19世纪末冯特在德国莱比锡大学创建第一个心理实验室，标志着心理学成为独立学科；理论基础是唯理论和经验论，研究方法来自实验生理学.</li>
<li>心理学主要派别(19世纪末到20世纪初，分歧)<ul>
<li>构造主义：用内省结合实验研究意识的构成(冯特，铁钦纳).</li>
<li>机能主义：内省法研究意识的作用和功能(詹姆斯，杜威).</li>
<li>行为主义：用实验研究行为；环境决定论；完全否定意识(华生).</li>
<li>格式塔：研究意识，强调心理是整体(韦特海默，柯勒，考夫卡).</li>
<li>精神分析：分析异常行为和无意识现象，早期泛性欲主义(弗洛伊德)；精神分析是通过释梦和自由联想，发现病人潜在动机，使精神宣泄.</li>
</ul>
</li>
<li>现代心理学研究取向(1930s后，融合)<ul>
<li>生理心理学：高级心理功能和生理功能有密切关系.</li>
<li>新行为主义(斯金纳，托尔曼)：中介变量，程序学习，行为治疗.</li>
<li>后弗洛伊德主义：强调意识和自我，关心儿童和青少年人格正常发展.</li>
<li>认知心理学(奈赛尔，西蒙)：人通过认知过程加工信息；结合神经科学产生认知神经科学，采用脑成像技术研究心理活动的脑机制.</li>
<li>人本主义：人性本善，发展为积极心理学，关注个体和团体的积极因素.</li>
<li>进化心理学：用进化论研究心理，认为人的心理机制是自然选择的结果.</li>
</ul>
</li>
<li>中国心理学发展：1917年北大首建心理实验室；1921年中国心理学会成立，设终身成就奖；国内排名前五的研究机构为北师大，北大，中科院，华东师大，西南大学(2017).</li>
</ul>
<h2 id="0x-02-心理的神经生理机制"><a href="#0x-02-心理的神经生理机制" class="headerlink" title="0x 02 心理的神经生理机制"></a>0x 02 心理的神经生理机制</h2><h3 id="2-1-神经系统和脑的进化"><a href="#2-1-神经系统和脑的进化" class="headerlink" title="2.1 神经系统和脑的进化"></a>2.1 神经系统和脑的进化</h3><ul>
<li>单细胞生物无神经系统；低等多细胞生物分化出网状神经系统.</li>
<li>无脊椎动物神经为链状，发头现象；脊椎动物神经是管状(背式)，空心.</li>
<li>管状的神经管前端形成脑泡，随后形成前、间、中、延、小五个独立脑泡.</li>
<li>两栖动物的前脑发展为两个半球；爬行动物出现大脑皮层.</li>
<li>哺乳动物脑内出现沟回，类人猿脑已接近人脑；大脑皮层是最高指挥中心.</li>
<li>人脑创造文化，又在文化环境中发展；人脑和语言交互进化.    </li>
</ul>
<h3 id="2-2-神经元"><a href="#2-2-神经元" class="headerlink" title="2.2 神经元"></a>2.2 神经元</h3><ul>
<li>神经元：即神经细胞，是神经系统的单位(百亿级)，作用是接受和传递信息；神经元由胞体，树突(接收端)和轴突(传送端)组成.</li>
<li>神经胶质：是神经元间的细胞(千亿级)；作用一是为神经元提供生长线路和支架，二是在神经元周围形成绝缘层(髓鞘)，三是为其输送营养，消除神经元之间过多神经递质.</li>
<li>神经冲动<ul>
<li>电传导：神经冲动在同一细胞内的传导，刺激使神经元从静息电位($K^{+$外流让膜内负电)到动作电位($Na^{+$内流变正电).</li>
<li>化学传导：神经冲动借助神经递质在突触(神经元接触的部分)间传递\footnote{轴突末梢有许多突触小泡，当神经冲动到达这里后，某些小泡破裂，其内的神经递质透过突触前膜释放，作用于突触后神经元的胞体或树突上的突触后膜，激发后神经元内的分子受体，改变细胞膜的通透性，引起后神经元电位变化，完成冲动传递..</li>
</ul>
</li>
<li>神经回路：神经元间通过突触建立的联系称为神经回路；神经回路才是脑内信息处理的基本单位；最简单的一种神经回路是反射弧.</li>
</ul>
<h3 id="2-3-神经系统"><a href="#2-3-神经系统" class="headerlink" title="2.3 神经系统"></a>2.3 神经系统</h3><ul>
<li>周围神经系统<pre><code>- 脊神经(31对)：发自脊髓，穿椎间孔外出.
- 脑神经(12对)：从脑部发出.
- 植物性神经(自主神经)：不受中枢神经系统的控制\footnote&#123;生物反馈研究表明通过训练，人类其实可以在一定程度上控制内脏的活动..
    
    - 交感神经(兴奋)：发自脊髓的全部胸髓核上三角腰髓的灰质侧角内.
    - 副交感神经(抑制)：发自中脑、桥脑、延脑及脊髓的骶部.
</code></pre>
<ul>
<li>中枢神经系统<ul>
<li>脊髓(脊柱内)：是脑和周围神经的桥梁；可完成一些简单的反射活动.</li>
<li>脑(颅腔内)<ul>
<li>脑干\footnote{脑干各段的广大区域，白质和灰质交织的结构称为网状结构系统.<ul>
<li>延脑：在脊髓上方，背侧覆盖着小脑，负责呼吸和姿势反射.</li>
<li>桥脑：延脑上方，位于延脑和中脑之间.</li>
<li>中脑：位于丘脑底部，小脑和桥脑之间.</li>
</ul>
</li>
<li>间脑<ul>
<li>丘脑：脑干上方、大脑两半球下部，两个鸡蛋型神经核团；丘脑是感觉信息的中继站.</li>
<li>下丘脑：丘脑正下方，对维持体内平衡和情绪产生有重要作用.</li>
</ul>
</li>
<li>小脑：脑干背面，分左右两半球；小脑跟运动协调有关.</li>
<li>边缘系统：大脑内侧面最深处的边缘的一些结构，包括扣带回、海马回、海马沟、附近的大脑皮层、以及丘脑、丘脑下部、中脑内侧被盖等；边缘系统控制某些本能活动，在情绪和记忆中起重要作用.</li>
<li>大脑：分左右两个半球.<ul>
<li>大脑半球表面叫灰质，即大脑皮层；大脑内侧称白质\footnote{白质有两条横行联络纤维，叫胼胝体，位于大脑半球底部，对两半球协同运动有重要作用..</li>
<li>大脑皮层是进化过程最新的部分和高级心理的中枢，按机能分为初级感觉区、初级运动区和联合区；联合区的面积比随动物进化水平的提高而增加，与高级心理关系密切.</li>
<li>大脑半球具有单侧优势；切断胼胝体后，每个半球只对来自身体另一侧的刺激作出反应；左半球有语言和数学功能，右半球有空间知觉和音乐能力；两半球分工是相对的，而非绝对的.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-4-脑功能的各种学说"><a href="#2-4-脑功能的各种学说" class="headerlink" title="2.4 脑功能的各种学说"></a>2.4 脑功能的各种学说</h3><ul>
<li>定位说：开始于颅相说，将颅骨特征与行为功能联系起来.</li>
<li>整体说：反定位说，强调脑功能的整体性.</li>
<li>机能系统说：将脑分成三个机能系统，行为和心理是三者协同的动力学结果.</li>
<li>模块说：脑是由高度专门化并相对独立的模块组成(认知神经科学).</li>
<li>神经网络说：高级认知活动是由脑区组成的神经网络实现，而同一脑区在不同认知中的作用可能不同.</li>
</ul>
<h3 id="2-5-内分泌腺和“神经—体液”调节"><a href="#2-5-内分泌腺和“神经—体液”调节" class="headerlink" title="2.5 内分泌腺和“神经—体液”调节"></a>2.5 内分泌腺和“神经—体液”调节</h3><ul>
<li>内分泌腺分泌激素(荷尔蒙)到血液或淋巴；与人的心理直接关联的有甲状腺、副甲状腺、肾上腺、性腺和脑垂体(主腺).</li>
<li>神经体液调节：神经系统通过内分泌腺分泌的激素影响效应器官的活动；方式有两种，中枢神经$\rightarrow$植物性神经$\rightarrow$内分泌腺，中枢神经$\rightarrow$下丘脑神经核$\rightarrow$脑垂体$\rightarrow$内分泌腺.</li>
</ul>
<h2 id="0x03-感觉"><a href="#0x03-感觉" class="headerlink" title="0x03 感觉"></a>0x03 感觉</h2><h3 id="3-1-感觉的一般概念"><a href="#3-1-感觉的一般概念" class="headerlink" title="3.1 感觉的一般概念"></a>3.1 感觉的一般概念</h3><ul>
<li>感觉是人脑对事物的个别属性的认识；感觉提供了内外环境的信息，并保证了机体与环境的信息平衡；感觉是一切高级复杂的心理现象的基础.</li>
<li>感觉是由体内、外刺激作用于感觉器官产生的；来自物体本身的刺激为远刺激(不怎么变)，直接作用于感觉器官的为近刺激(时刻在变).</li>
<li>感觉编码指将刺激的能量转化为神经系统能够接受的神经能或神经冲动\footnote{穆勒提出神经特殊能量学说，认为每种感觉神经只能产生一种感觉，但他只承认人脑对神经自身状态的直接感受，否认感觉还依赖于外物的性质，认识论上是不对的.；    神经系统同时采用特异化编码和模式编码\footnote{特异化编码指不同性质的感觉由不同神经元来传递；模式编码指编码是由整组神经元的激活模式引起的.</li>
<li>人的感官只对一定范围内的刺激作出反应，这个范围即感觉阈限\footnote{刚刚能引起感觉的即绝对阈限，刚刚能引起差别感觉的刺激的最小差异量即差别阈限/最小可觉差(JND)，相应的感觉能力即感受性；感受性和感觉阈限成反比.<pre><code>- 韦伯定律：对刺激的差别感觉取决于刺激增量与原刺激量的比值.
- 费希纳认为感觉量是刺激量的对数函数，而斯蒂文斯认为是幂函数.
</code></pre>
<ul>
<li>信号检测理论：用来评价个体感受性及其反应标准对信号检测的贡献.</li>
</ul>
</li>
</ul>
<h3 id="3-2-视觉"><a href="#3-2-视觉" class="headerlink" title="3.2 视觉"></a>3.2 视觉</h3><p>视觉刺激：视觉是由光刺激作用于人眼产生的，主要是物体表面反射的光线.</p>
<ul>
<li>视觉的生理机制<ul>
<li>眼球\footnote{眼球外还有三对眼外肌，受神经支配，使眼球转动.<ul>
<li>眼球壁<ul>
<li>外层：巩膜，角膜.</li>
<li>中层：虹膜(中间为瞳孔)，睫状肌，脉络膜.</li>
<li>内层：视网膜(感光部分)，视神经内段.</li>
</ul>
</li>
<li>眼球内容：晶状体，房水，玻璃体.</li>
</ul>
</li>
<li>视网膜：外层为感光细胞，中层含有双极细胞与其他，内层含有神经节细胞；两种感光细胞为视杆细胞(夜视，感受明暗)和视锥细胞(昼视，感受细节和颜色)，二者中的视觉色素在光刺激下激发感受细胞的神经冲动，完成换能作用；视网膜有盲点.</li>
<li>视觉传导机制(对侧刺激)：神经冲动$\rightarrow$视网膜双极细胞$\rightarrow$视神经节细胞$\rightarrow$丘脑外侧膝状体神经纤维$\rightarrow$大脑(枕叶纹状区)；这一过程两种感光细胞在双极细胞和视神经节细胞的会聚比例的不同和侧抑制作用都会影响到视觉.</li>
<li>视觉中枢机制：视觉的直接投射区大脑枕叶纹状区，与其临近的脑区负责进一步加工视觉信号；研究视觉感受野\footnote{视觉感受野是视网膜上的一定区域，受到刺激后视觉系统中与其有联系的各层细胞.对解释视觉中枢机制有重要作用.</li>
</ul>
</li>
<li>视觉的基本现象<ul>
<li>明度：主要由光线强弱决定的视觉经验；不同光照条件下视觉机制不同(普肯耶现象).</li>
<li>颜色：光波作用于人眼引起的视觉经验；基本特性为色调、明度、饱和度；从光谱任取三个颜色按一定比例混合就可以得到任何颜色(最好的三原色是红绿蓝)；视网膜水平上视觉遵循三色说，在更高水平表现为对抗过程理论\footnote{三色说认为视网膜有三种感受器，三者按不同比例活动，产生各种颜色经验；对抗过程理论认为视网膜存在功能对立的细胞，颜色的信息加工表现为对抗过程..</li>
<li>视觉中的空间特性：视觉对比、边界突出(马赫带)、视敏度(视力).</li>
<li>视觉中的时间特性：视觉适应(明暗)、视觉延迟(后像)、闪光融合(丢帧)、视觉掩蔽.</li>
</ul>
</li>
</ul>
<h3 id="3-3-听觉"><a href="#3-3-听觉" class="headerlink" title="3.3 听觉"></a>3.3 听觉</h3><ul>
<li>听觉刺激：物体振动产生声波，通过空气传到人耳，产生听觉.</li>
<li>听觉的生理机制<ul>
<li>耳<ul>
<li>外耳：耳廓和外耳道(收集声音)</li>
<li>中耳：鼓膜、听小骨(锤骨，砧骨，镫骨)、卵圆窗、正圆窗(声音的生理性传导)</li>
<li>内耳：前庭器官、耳蜗(耳蜗基底膜上的毛细胞是听觉感受器)</li>
</ul>
</li>
<li>听觉的传导机制：声音$\rightarrow$镫骨$\rightarrow$耳蜗液$\rightarrow$基底膜$\rightarrow$毛细胞兴奋产生动作电位，实现能量转换.</li>
<li>听觉的中枢机制：毛细胞轴突$\rightarrow$下丘$\rightarrow$听觉核心皮层(同侧对侧输入都有，以对侧为主.)</li>
</ul>
</li>
<li>听觉的基本现象    <ul>
<li>音调：主要由声波频率决定的听觉特性.<ul>
<li>频率理论(电话理论)：内耳基底膜是和镫骨按相同频率运动，振动数量与声音原有频率相适应.</li>
<li>共鸣理论(位置理论)：基底膜的横纤维长短不同，因此能对不同频率的声音产生共鸣.</li>
<li>行波理论：声波引起整个基底膜振动，随着声音频率不同，基底膜最大振幅也不同，从而实现了对声音频率的分辨.</li>
<li>神经齐射理论：声音低于400Hz时，个别神经纤维单独对其作出反应；声音频率提高后，个别纤维联合齐射，对其作出反应；当声音高于5000Hz，只服从位置理论.</li>
</ul>
</li>
<li>音响：由声音强度或声压水平决定的听觉特性.</li>
<li>声音掩蔽：受同时起作用的其他声音的干扰，某种声音听觉阈限上升.</li>
</ul>
</li>
</ul>
<h3 id="3-4-其他感觉"><a href="#3-4-其他感觉" class="headerlink" title="3.4 其他感觉"></a>3.4 其他感觉</h3><ul>
<li>肤觉：刺激作用于皮肤引起的各种感觉，基本形态有触觉、冷觉、温觉、痛觉.<ul>
<li>触压觉(感受器位于真皮内的神经末梢)：触觉(皮肤轻微变形)，压觉(皮肤明显变形)，搅动觉，痒觉.</li>
<li>温度觉\footnote{矛盾热现象：如果负责冷、热两种神经纤维同时激活，大脑通常会解读为“热”.：温觉(高于生理零度的刺激)，冷觉(低于)；二者感受器不同.</li>
<li>痛觉(感受器是皮肤下各层中的自由神经末梢)：任何破坏或损伤有机体的刺激都能引起痛觉.</li>
</ul>
</li>
<li>嗅觉：有气味的物质作用于鼻腔上部黏膜中的嗅细胞，产生神经兴奋，经嗅束传海马回、沟内，产生嗅觉.</li>
<li>味觉\footnote{人有酸甜苦咸四种味觉(+味精觉)，味蕾分布不同，舌尖对甜最敏感，舌根、中、两侧对酸苦咸最敏感；出锅前觉得可口的菜，吃的时候就会觉得太咸了.：适宜刺激是溶于水的化学物质；感受器是舌面乳突内的味蕾；味觉还受嗅觉和温度的影响.</li>
<li>内部感觉：反映机体内部状态和变化的感觉，包括动觉、静觉、机体觉.<ul>
<li>动觉(运动感觉)：反映身体各部分位置、运动和肌肉紧张程度，是随意运动的基础，是主动触摸的重要成分；感受器是肌梭、腱梭和关节小体.</li>
<li>静觉(平衡觉)：感受器位于内耳的前庭器官，受刺激时可能引起晕船晕车现象；前庭器官活动的稳定性可以通过训练得到改进.</li>
<li>机体觉(内脏感觉)：是由内脏活动作用于脏器壁上的感受器产生的；感受器将刺激传入中枢，并产生饥饿、饱涨、疼痛等感觉.</li>
</ul>
</li>
</ul>
<h2 id="0x04-知觉"><a href="#0x04-知觉" class="headerlink" title="0x04 知觉"></a>0x04 知觉</h2><h3 id="4-1-知觉的一般概念"><a href="#4-1-知觉的一般概念" class="headerlink" title="4.1 知觉的一般概念"></a>4.1 知觉的一般概念</h3><ul>
<li><p>知觉是客观事物直接作用于感官而在头脑中产生的对事物整体的认识；知觉作为一种过程，以感觉为基础\footnote{但知觉并不等于感觉的简单总和：感觉到四条直线，并不等于知觉到一个正方形.，包含察觉、分辨和确认三种作用.</p>
</li>
<li><p>知觉不仅依赖于直接作用于感官的刺激物提供的知觉信息(自下而上加工)，还依赖于人已经在头脑中已经存储的信息(自上而下加工).</p>
</li>
<li><p>知觉过程：人在神经系统的不同水平和层次上同时实现特征察觉(将不同刺激分解成其组成部分)和特征捆绑(对刺激性质的整合).</p>
</li>
<li><p>知觉按主导感官分为视、听、触、嗅、味知觉；也可分为空间、时间、运动知觉，错觉；还可分为阈下知觉(无意识)和阈上知觉.</p>
</li>
</ul>
<h3 id="4-2-知觉的特性"><a href="#4-2-知觉的特性" class="headerlink" title="4.2 知觉的特性"></a>4.2 知觉的特性</h3><ul>
<li><p>知觉的对象和背景相互转化、相互依赖：知觉是由对象及其背景的相互关系决定的，切与注意的选择性有关.    </p>
</li>
<li><p>知觉的整体性与部分性相互依存：人对整体性质比对局部性质更敏感；知觉的整体性提高了知觉事物的能力，但也抑制了对个别成分的知觉.</p>
</li>
<li><p>假设检验：知觉不是由简单的刺激——反应模式决定，是由感觉资料提出的假设，并由过去的知识经验加以检验，力求对知觉对象作出最好的解释；理解有助于对象从背景中分出，有助于知觉的整体性，还能产生知觉期待和预测.</p>
</li>
<li><p>知觉恒常性：当知觉的客观条件在一定范围内改变时，知觉保持稳定；其主要受视觉线索(参照物)影响.</p>
</li>
<li><p>知觉学习：知觉能力可以通过学习和训练得到改善；经验影响知觉的现象有知觉定势、知觉习惯、种族效应(脸盲).</p>
</li>
<li><p>知觉适应：当视觉输入变化时，视觉系统能适应变化，并使知觉能力恢复到之前状态.</p>
</li>
</ul>
<h3 id="4-3-空间知觉"><a href="#4-3-空间知觉" class="headerlink" title="4.3 空间知觉"></a>4.3 空间知觉</h3><p>空间知觉是人对物体的空间关系的认识，包括以下四方面.</p>
<ul>
<li>形状知觉<ul>
<li>形状知觉是知觉、触觉、动觉协同运动的结果；最重要的物体属性.</li>
<li>对物体形状的识别开始于对原始特征(点、线条、角度、朝向、运动)的分析和检测，且是自动的、无意识的.</li>
<li>图形借助可见轮廓从背景分离；轮廓掩蔽说明轮廓的形成需要时间；视觉系统倾向于把视野中的不完整因素整合成正规化图形(主观轮廓).</li>
<li>视野中的成分是否形成图形，遵循临近性、相似性、对称性、良好连续性、共同命运、封闭性、线条方向、简单性等原则.</li>
<li>形状识别包括物体识别(始于对物体点线面等特征的分析)、面孔识别(依赖面部器官的空间关系)和文字识别(左侧梭状回区可能专门负责).</li>
<li>在注意的参与下，人脑将不同特征整合到一起(特征捆绑)，从而知觉到事物的整体.</li>
<li>眼跳中的微跳对维持形状知觉恒常性有作用；眼跳中的注视与信息提取有关.</li>
</ul>
</li>
<li>大小知觉<ul>
<li>大小距离不变假设：\<br>\textcolor{white{空格空格知觉对象大小 = 视网膜成像大小 $\times$ 对象与眼睛的距离</li>
<li>影响物体大小知觉的因素有对物体的熟悉性、临近物体的大小对比、观察者的身体姿势变化.</li>
</ul>
</li>
<li>深度和距离知觉：知觉物体的深度和距离.<ul>
<li>肌肉线索：在深度知觉中调节(晶状体随距离变化而变化)的作用很小，辐合(双眼随距离的改变而将视辐合聚到物体上，物像落至视网膜中央凹内)作用较大.</li>
<li>单眼线索：包括对象遮挡、线条透视、空气透视、相对高度、纹理梯度、运动视觉与运动透视\footnote{运动视觉：近处物体看似向反向快速移动；远处物体同向慢速移动.</li>
<li>双眼线索：主要依赖双眼视差(当视像落至双眼视网膜非对应部分且差别不大时，人将看到深度和距离.)</li>
</ul>
</li>
<li>方位定向：对物体空间关系、位置和对自身空间位置的知觉；人的定向主要依赖视觉和听觉.</li>
</ul>
<h3 id="4-4-时间知觉与运动知觉"><a href="#4-4-时间知觉与运动知觉" class="headerlink" title="4.4 时间知觉与运动知觉"></a>4.4 时间知觉与运动知觉</h3><ul>
<li>时间知觉：知觉到事物的连续性和顺序性，包括时序、视距和时间点知觉；时间知觉的感官里，听觉&gt;触觉&gt;视觉；时间知觉与小脑、基底节、海马结构、额叶等均有关.</li>
<li>运动知觉：物体的运动特性直接作用于人脑产生；运动物体在视网膜上的映像移动使其上的感受器连续受到激发，从而提供运动的信息，此外还受中枢神经发出的动作指令影响；似动指物体未动，而人察觉到了运动(由相对运动或感觉延迟诱发).</li>
</ul>
<h3 id="4-5-错觉"><a href="#4-5-错觉" class="headerlink" title="4.5 错觉"></a>4.5 错觉</h3><p>不能正确表达事物特性的知觉称为错觉；常见有大小、形状、方向、明暗错觉；错觉成因尚在研究中.</p>
<h2 id="0x05-意识和注意"><a href="#0x05-意识和注意" class="headerlink" title="0x05 意识和注意"></a>0x05 意识和注意</h2><h3 id="5-1-意识的一般概念"><a href="#5-1-意识的一般概念" class="headerlink" title="5.1 意识的一般概念"></a>5.1 意识的一般概念</h3><ul>
<li>难以定义意识，但意识是一种觉知、高级心理功能、心理状态.</li>
<li>无意识(潜意识)是个体不曾察觉到的心理活动，常见的有无意识行为、对刺激的无意识、盲视.</li>
<li>意识的局限性不仅在于人意识不到某些作用于感官的刺激，还在于同一时间可进入意识的信息量有限(一心不能二用)；意识的能动性在于人能意识到事实上并不存在的东西(幻听).</li>
<li>意识状态的变化与生物节律(人体功能的周期性变化)密切相关.</li>
</ul>
<h3 id="5-2-几种不同的意识状态"><a href="#5-2-几种不同的意识状态" class="headerlink" title="5.2 几种不同的意识状态"></a>5.2 几种不同的意识状态</h3><ul>
<li>睡眠和梦<ul>
<li>睡眠是与觉醒对立的意识状态，分为浅睡(10 min)、睡眠锭(20 min)、深度睡眠前(40 min)、深度睡眠(20 min)\footnote{三、四阶段合称为慢波睡眠(SWS)，或统称为深度睡眠.、快速眼动阶段(REM，伴有梦境)；以此为周期循环，REM阶段越来越长(10 min - 1 h)，临近黎明时，SWS阶段会逐渐消失.</li>
<li>睡眠功能：一种解释是睡眠使工作了一天的大脑和身体得到休息和恢复；一种解释是睡眠使动物避免消耗能量，并避免在夜里活动受到伤害.</li>
<li>梦是睡眠中的一个环节.精神分析认为梦是潜意识的显现；生理学认为梦是人对脑的随机神经活动的主观体验；认知观点认为人在睡眠中将经验重新整合，形成梦境.</li>
</ul>
</li>
<li>催眠<ul>
<li>催眠也是一种意识状态；催眠状态下，个体失去独立思考和行动能力，思维、言语和活动都是在催眠师的指引下进行；催眠不同于睡眠，其脑电记录与个体在清醒状态相同.</li>
<li>有人认为催眠只是被试扮演了被催眠的人这样一种社会角色，其的确相信自己在经历另外一种意识状态，只能顺从催眠师的指示；有人认为催眠条件下个体的执行功能正常，而监督功能被弱化.</li>
</ul>
</li>
<li>白日梦和幻想：白日梦是人在清醒时意识的自发漂移状态，程度严重时称为幻想.</li>
<li>精神活性药物(兴奋剂、抑制剂、致幻剂)易引发意识状态的改变.</li>
</ul>
<h3 id="5-3-注意"><a href="#5-3-注意" class="headerlink" title="5.3 注意"></a>5.3 注意</h3><ul>
<li>注意是意识或心理活动的指向和集中；注意不等同于意识，意识是心理动作，意识是内容；另一方面二者密不可分，注意条件下，意识内容比较清晰；注意的基本功能是选择信息.</li>
<li>注意的种类<ul>
<li>选择性注意：个体在面对同时出现的多种刺激时选择一种进行注意；其抑制机制有负启动、返回抑制、注意瞬脱现象.</li>
<li>持续性注意：个体在一定时间内保持在某个事物上.</li>
<li>分配性注意：个体在同一时间对多种刺激进行注意，或将注意分配到不同的活动中.</li>
</ul>
</li>
<li>注意的认知理论<ul>
<li>注意的选择功能<ul>
<li>过滤器理论：信息$\rightarrow$过滤(选择)$\rightarrow$分析$\rightarrow$反应</li>
<li>衰减理论：信息$\rightarrow$衰减(选择)$\rightarrow$分析$\rightarrow$反应</li>
<li>后期选择：信息$\rightarrow$分析$\rightarrow$选择$\rightarrow$反应</li>
<li>多阶段选择理论：选择在不同的信息加工阶段都有发生.</li>
</ul>
</li>
<li>认知资源分配<ul>
<li>认知资源理论：注意是一组对刺激进行归类和识别的认知资源.当资源完全被占用时，新的刺激将得不到注意.</li>
<li>双加工理论：人类认知分为自动化加工和受意识控制的加工.其中后者受认知资源的限制，需要注意的参与，可随环境变化而调整.</li>
</ul>
</li>
</ul>
</li>
<li>注意的神经机制：包括朝向反射、脑干网状结构和大脑皮层的协调活动.</li>
</ul>
<h2 id="0x06-未完待续"><a href="#0x06-未完待续" class="headerlink" title="0x06 未完待续"></a>0x06 未完待续</h2><hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://book.douban.com/subject/1024279/">普通心理学</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>心理学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>算法交易（Algorithmic Trading）</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E4%BA%A4%E6%98%93/</url>
    <content><![CDATA[<h2 id="0x00-环境准备"><a href="#0x00-环境准备" class="headerlink" title="0x00 环境准备"></a>0x00 环境准备</h2><ol>
<li><p>系统版本：Windows 7 sp1 x64</p>
</li>
<li><p>Python版本：3.8.8 （3.9 以上不支持在win7上运行）</p>
</li>
<li><p>Python包： <code>pip install numpy pandas matplotlib mplfinance jupyter tushare</code></p>
</li>
<li><p>在线平台：<a href="https://www.joinquant.com/">聚宽</a></p>
</li>
<li><p>量化概念（算法交易）</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>选股</td>
<td></td>
</tr>
<tr>
<td>择时</td>
<td></td>
</tr>
<tr>
<td>仓位管理</td>
<td>多只股票的资金分配、空仓率</td>
</tr>
<tr>
<td>止盈止损</td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<p><img src="https://i.loli.net/2021/05/27/42GYeJhXZi8s5PQ.png" alt="mind.PNG"></p>
<hr>
<h2 id="0x01-数据下载"><a href="#0x01-数据下载" class="headerlink" title="0x01 数据下载"></a>0x01 数据下载</h2><h3 id="1-1-tushare包"><a href="#1-1-tushare包" class="headerlink" title="1.1 tushare包"></a>1.1 tushare包</h3><h4 id="1-1-1-价格与成交量"><a href="#1-1-1-价格与成交量" class="headerlink" title="1.1.1 价格与成交量"></a>1.1.1 价格与成交量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开盘价，收盘价，最高价，最低价，成交量</span></span><br><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = ts.get_k_data(<span class="string">&#x27;600519&#x27;</span>, start=<span class="string">&#x27;1988-01-01&#x27;</span>) <span class="comment">#茅台股票代码为600519</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;600519_k_total.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/UtO82QVvXlnarfD.png" alt="csv.PNG"></p>
<p><strong>注意：</strong></p>
<ol>
<li><code>ktype=</code> 默认取日K线，最高频率为5分钟K线，1分钟高频交易数据无法拿到。</li>
<li><code>autype=</code>默认为前复权。复权是相对于除权而言，所谓除权是上市公司分红派息、送股配股时需要把相关权益从当前股价中扣除，从而造成股价的断崖式下跌。复权就是在股票除权后把股价恢复到除权之前，不然会影响投资判断。前复权就是修正除权前的价格，向之后的价格对齐；后复权就是修正除权后的价格，向之前的价格对齐。</li>
</ol>
<h4 id="1-1-2-其他"><a href="#1-1-2-其他" class="headerlink" title="1.1.2 其他"></a>1.1.2 其他</h4><h5 id="1-1-2-1-换手率（turnover）-ts-get-hist-data"><a href="#1-1-2-1-换手率（turnover）-ts-get-hist-data" class="headerlink" title="1.1.2.1 换手率（turnover） ts.get_hist_data()"></a>1.1.2.1 换手率（turnover） <code>ts.get_hist_data()</code></h5><p>无法指定起止日期，只能拿到近三年的数据。</p>
<h5 id="1-1-2-2-实时分时图（买卖五档的价格和笔数）ts-get-realtime-quotes"><a href="#1-1-2-2-实时分时图（买卖五档的价格和笔数）ts-get-realtime-quotes" class="headerlink" title="1.1.2.2 实时分时图（买卖五档的价格和笔数）ts.get_realtime_quotes()"></a>1.1.2.2 实时分时图（买卖五档的价格和笔数）<code>ts.get_realtime_quotes()</code></h5><p><img src="https://i.loli.net/2021/05/27/dBmaQhUqv3MA4by.png" alt="jp44.PNG"></p>
<h5 id="1-1-2-3-当日分笔成交-ts-get-today-ticks"><a href="#1-1-2-3-当日分笔成交-ts-get-today-ticks" class="headerlink" title="1.1.2.3 当日分笔成交 ts.get_today_ticks()"></a>1.1.2.3 当日分笔成交 <code>ts.get_today_ticks()</code></h5><p><img src="https://i.loli.net/2021/05/27/ha4j8L27lGKWgNq.png" alt="jp55.PNG"></p>
<h5 id="1-1-2-4-A股所有股票数据-ts-get-today-all"><a href="#1-1-2-4-A股所有股票数据-ts-get-today-all" class="headerlink" title="1.1.2.4 A股所有股票数据 ts.get_today_all()"></a>1.1.2.4 A股所有股票数据 <code>ts.get_today_all()</code></h5><p><img src="https://i.loli.net/2021/05/27/6m3wnFuXa45pQAf.png" alt="jp6.PNG"></p>
<h5 id="1-1-2-5-行情指数列表-ts-get-index"><a href="#1-1-2-5-行情指数列表-ts-get-index" class="headerlink" title="1.1.2.5 行情指数列表 ts.get_index()"></a>1.1.2.5 行情指数列表 <code>ts.get_index()</code></h5><p><img src="https://i.loli.net/2021/05/27/O4PJTIvEDcdZheY.png" alt="index.PNG"></p>
<hr>
<h2 id="0x02-策略收集"><a href="#0x02-策略收集" class="headerlink" title="0x02 策略收集"></a>0x02 策略收集</h2><h3 id="2-1-定投策略"><a href="#2-1-定投策略" class="headerlink" title="2.1 定投策略"></a>2.1 定投策略</h3><p>（一）本地实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#策略1：自2010年1月1日，每月第一个交易日买入1手茅台，每年最后的交易日卖出所有股票</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> mplfinance <span class="keyword">as</span> mpf</span><br><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据获取</span></span><br><span class="line">df = ts.get_k_data(<span class="string">&#x27;600519&#x27;</span>, start=<span class="string">&#x27;1988-01-01&#x27;</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;600519.csv&#x27;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;600519.csv&#x27;</span>, index_col=<span class="string">&#x27;date&#x27;</span>, parse_dates=[<span class="string">&#x27;date&#x27;</span>])[[<span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;close&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>]] <span class="comment">#只保留四列基本数据		</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据处理</span></span><br><span class="line">df = df[<span class="string">&#x27;2010-01-01&#x27;</span>: <span class="string">&#x27;2020-12-31&#x27;</span>] <span class="comment">#剔除非整年数据</span></span><br><span class="line">df_monthly = df.resample(<span class="string">&#x27;M&#x27;</span>).first() <span class="comment">#每月第一个交易日数据</span></span><br><span class="line">df_yearly = df.resample(<span class="string">&#x27;A&#x27;</span>).last() <span class="comment">#每年最后一个交易日数据</span></span><br><span class="line"><span class="comment">#Rk: index显示不对，不影响计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算收益</span></span><br><span class="line">cost_money = df_monthly.<span class="built_in">sum</span>()[<span class="string">&#x27;open&#x27;</span>] * <span class="number">100</span> <span class="comment"># 每月第一个交易日以开盘价买入一手</span></span><br><span class="line">earn_money = df_yearly.<span class="built_in">sum</span>()[<span class="string">&#x27;close&#x27;</span>] * <span class="number">100</span> * <span class="number">12</span> <span class="comment">#每月最后一个交易日以收盘价把当年12手股票卖掉</span></span><br><span class="line">total = earn_money - cost_money <span class="comment">#总收益</span></span><br></pre></td></tr></table></figure>

<p>（二）聚宽实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略1：定投</span></span><br><span class="line"><span class="comment"># 标的：贵州茅台</span></span><br><span class="line"><span class="comment"># 每月第一个交易日买入1手茅台，每年最后一个交易日卖出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    run_daily(period, time=<span class="string">&#x27;every_bar&#x27;</span>) <span class="comment">#指定每天跑什么函数（period）</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = <span class="string">&#x27;600519.XSHG&#x27;</span> <span class="comment"># 选定交易股票为茅台</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 交易日期处理</span></span><br><span class="line">    g.tradeDaysTotal = get_trade_days(start_date=<span class="string">&quot;1988-01-01&quot;</span>) <span class="comment">#获取全部交易日期; type = numpy.ndarray [datetime.date,...]</span></span><br><span class="line">    g.df_dateTimeIndex = pd.to_datetime(g.tradeDaysTotal) <span class="comment">#时间索引</span></span><br><span class="line">    g.daySeries = pd.Series(g.tradeDaysTotal, index = g.df_dateTimeIndex)[<span class="string">&#x27;2010-01-01&#x27;</span>: <span class="string">&#x27;2020-12-31&#x27;</span>] <span class="comment">#创建Series对象，剔除非整年数据</span></span><br><span class="line">    g.day_monthly = g.daySeries.resample(<span class="string">&#x27;M&#x27;</span>).first().tolist() <span class="comment">#每月第一个交易日; type = list[datetime.date, ...]</span></span><br><span class="line">    g.day_yearly = g.daySeries.resample(<span class="string">&#x27;A&#x27;</span>).last().tolist() <span class="comment">#每年最后一个交易日</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#验证日期处理是否正确</span></span><br><span class="line">    <span class="comment">#if datetime.date(*map(int, &#x27;2005-02-01&#x27;.split(&#x27;-&#x27;))) in g.day_monthly:</span></span><br><span class="line">    <span class="comment">#    print(&#x27;ok&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment">#交易日期处理</span></span><br><span class="line">    <span class="comment">#now_date = datetime.date.today() #获取程序运行的实际日期; type = datetime.date</span></span><br><span class="line">    current_date = get_current_data()[g.security].date <span class="comment">#获取当前日期</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交易</span></span><br><span class="line">    <span class="comment"># 当前时间为年度最后一个交易日</span></span><br><span class="line">    <span class="keyword">if</span> current_date <span class="keyword">in</span> g.day_yearly:</span><br><span class="line">        order_target(g.security, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line">    <span class="comment"># 当前是月度第一个交易日</span></span><br><span class="line">    <span class="keyword">if</span> current_date <span class="keyword">in</span> g.day_monthly:</span><br><span class="line">        order(g.security, <span class="number">100</span>) <span class="comment">#买入1手茅台</span></span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2021/05/27/km6gxORoibSAdyU.png" alt="strategy1result.PNG"></p>
<blockquote>
<p><code>get_current_data()</code>API文档并无<code>date</code>属性说明，全凭自己推测出来的。</p>
</blockquote>
<h3 id="2-2-双均线策略"><a href="#2-2-双均线策略" class="headerlink" title="2.2 双均线策略"></a>2.2 双均线策略</h3><p>（一）本地实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#策略2：金叉买入，死叉卖出（以5日均线和10日均线代表短线和中线）</span></span><br><span class="line"><span class="comment">#import及数据获取代码同上</span></span><br><span class="line">df[<span class="string">&#x27;MA_5&#x27;</span>] = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">5</span>).mean() <span class="comment">#5日均线</span></span><br><span class="line">df[<span class="string">&#x27;MA_60&#x27;</span>] = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">10</span>).mean() <span class="comment">#10日均线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分析输出所有金叉日期和死叉日期</span></span><br><span class="line">df = df.dropna() <span class="comment">#删除含有NaN的全部行</span></span><br><span class="line">sr1 = df[<span class="string">&#x27;MA_5&#x27;</span>] &gt;= df[<span class="string">&#x27;MA_10&#x27;</span>]</span><br><span class="line">sr2 = df[<span class="string">&#x27;MA_5&#x27;</span>] &lt; df[<span class="string">&#x27;MA_10&#x27;</span>]</span><br><span class="line">gold_cross = df[sr1 &amp; sr2.shift(<span class="number">1</span>)].index <span class="comment">#当日MA5&gt;=MA10，且前日MA5&lt;ma10.则为金叉</span></span><br><span class="line">dead_cross = df[sr2 &amp; sr1.shift(<span class="number">1</span>)].index <span class="comment">#当日MA5&lt;MA10，且前日MA5&gt;=ma10.则为死叉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算收益</span></span><br><span class="line"><span class="comment">#假设：假如从2010年1月1日开始，初始资金为100000元，金叉尽量买入，死叉全部卖出，则至今收益多少？</span></span><br><span class="line">first_money = <span class="number">100000</span></span><br><span class="line">money = first_money    <span class="comment"># 持有的资金</span></span><br><span class="line">hold = <span class="number">0</span>               <span class="comment"># 持有的股票</span></span><br><span class="line">sr1 = pd.Series(<span class="number">1</span>, index=gold_cross) <span class="comment"># 金叉点填1</span></span><br><span class="line">sr2 = pd.Series(<span class="number">0</span>, index=dead_cross) <span class="comment"># 死叉点填0</span></span><br><span class="line"></span><br><span class="line">sr = sr1.append(sr2).sort_index()    <span class="comment"># 将两个表合并，并按时间排序</span></span><br><span class="line">sr = sr[<span class="string">&#x27;2010-01-01&#x27;</span>:]           <span class="comment"># 从2010年1月1日开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(sr)):</span><br><span class="line">    p = df[<span class="string">&#x27;open&#x27;</span>][sr.index[i]]      <span class="comment"># 当天的开盘价</span></span><br><span class="line">    <span class="keyword">if</span> sr.iloc[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 金叉</span></span><br><span class="line">        buy = money // (<span class="number">100</span> * p)   <span class="comment"># 买多少手</span></span><br><span class="line">        hold += buy * <span class="number">100</span></span><br><span class="line">        money -= buy * <span class="number">100</span> * p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 死叉</span></span><br><span class="line">        money += hold * p</span><br><span class="line">        hold = <span class="number">0</span>    <span class="comment"># 持有股票重置为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算最后一天股票市值加上持有的资金</span></span><br><span class="line">p = df[<span class="string">&#x27;open&#x27;</span>][-<span class="number">1</span>] <span class="comment">#最后一天开盘价</span></span><br><span class="line">now_money = hold * p + money</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前持有资产总额:&#x27;</span>, now_money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;盈亏情况（持有股票+现金）:&#x27;</span>, now_money - first_money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;持有资金数（净盈亏）：&#x27;</span>, money-first_money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;持有股票数：&#x27;</span>, hold)</span><br></pre></td></tr></table></figure>

<p>（二）聚宽实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略2：双均线（金叉买入死叉卖出）</span></span><br><span class="line"><span class="comment"># 标的：贵州茅台</span></span><br><span class="line"><span class="comment"># 金叉买入：5日均线 &gt; 10日均线 且不持仓</span></span><br><span class="line"><span class="comment"># 死叉卖出：5日均线 &lt; 10日均线 且持仓</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    run_daily(period, time=<span class="string">&#x27;every_bar&#x27;</span>) <span class="comment">#指定每天跑什么函数（period）</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = [<span class="string">&#x27;600519.XSHG&#x27;</span>] <span class="comment"># 选定交易股票为茅台</span></span><br><span class="line">    g.p1 = <span class="number">5</span></span><br><span class="line">    g.p2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> g.security:</span><br><span class="line">        df = attribute_history(stock, g.p2) <span class="comment"># 获取股票历史数据（往前数10天的数据）</span></span><br><span class="line">        ma10 = df[<span class="string">&#x27;close&#x27;</span>].mean()</span><br><span class="line">        ma5  = df[<span class="string">&#x27;close&#x27;</span>][-<span class="number">5</span>:].mean()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#死叉：</span></span><br><span class="line">        <span class="keyword">if</span> ma10 &gt; ma5 <span class="keyword">and</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">            order_target(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#金叉：</span></span><br><span class="line">        <span class="keyword">if</span> ma10 &lt; ma5 <span class="keyword">and</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">            order_value(stock, context.portfolio.available_cash * <span class="number">0.8</span>) <span class="comment"># 买入80%仓位</span></span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2021/05/27/SCJ3846fNa2ARne.png" alt="strategy2result.PNG"></p>
<blockquote>
<p>聚宽实现双均线策略时，均线计算略有问题，当天5日K线应包含本日数据，但attribute_history(stock, 5)不包含本日数据。</p>
</blockquote>
<h3 id="2-3-低股价策略"><a href="#2-3-低股价策略" class="headerlink" title="2.3 低股价策略"></a>2.3 低股价策略</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略3：低股价策略（单因子选股）</span></span><br><span class="line"><span class="comment"># 标的：沪深300所有成分股</span></span><br><span class="line"><span class="comment"># 如果当前股价&lt; 10元 且当前不持仓，则买入；</span></span><br><span class="line"><span class="comment"># 如果当前估计比买入时上涨了25%，则清仓止盈；</span></span><br><span class="line"><span class="comment"># 如果当前估计比买入时下跌了10%，则清仓止损。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化框架</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    run_daily(period, time=<span class="string">&#x27;every_bar&#x27;</span>) <span class="comment">#指定每天跑什么函数（period）</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准为沪深300指数（红线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#g.security = &#x27;600519.XSHE&#x27; # 选定交易股票为茅台</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定交易标的为沪深300股票池(list)</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment"># 设置佣金、印花税</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环框架（每个交易日都执行initialize函数）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment">#print(get_current_data()[&#x27;600519.XSHG&#x27;].day_open) # 获取茅台开盘价</span></span><br><span class="line">    <span class="comment">#print(attribute_history(&#x27;600519.XSHG&#x27;,5)) #获取5天的茅台数据  </span></span><br><span class="line">    <span class="comment">#order(&#x27;600519.XSHG&#x27;, 100) # 按股数下单（买1手茅台）</span></span><br><span class="line">    <span class="comment">#order_value(&#x27;600519.XSHG&#x27;, 200000) # 按价值下单（买20万的茅台）</span></span><br><span class="line">    </span><br><span class="line">    tobuy = []</span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> g.security:</span><br><span class="line">        p = get_current_data()[stock].day_open <span class="comment"># 股价（开盘价）</span></span><br><span class="line">        amount = context.portfolio.positions[stock].total_amount <span class="comment"># 持仓信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#找符合条件的股票</span></span><br><span class="line">        <span class="keyword">if</span> p &lt;= <span class="number">10.0</span> <span class="keyword">and</span> amount == <span class="number">0</span>:</span><br><span class="line">            tobuy.append(stock)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">#卖（先卖后买） </span></span><br><span class="line">        cost = context.portfolio.positions[stock].avg_cost</span><br><span class="line">        <span class="keyword">if</span> amount &gt; <span class="number">0</span> <span class="keyword">and</span> p &gt;= cost * <span class="number">1.25</span>:</span><br><span class="line">            order_target(stock, <span class="number">0</span>) <span class="comment">#清仓止盈</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; <span class="number">0</span> <span class="keyword">and</span> p &lt;= cost * <span class="number">0.9</span>:</span><br><span class="line">            order_target(stock, <span class="number">0</span>) <span class="comment">#清仓止损</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">#买</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tobuy):</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(tobuy)</span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> tobuy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/JZUecEDtm8AIO49.png" alt="strategy3result.PNG"></p>
<ul>
<li>Q：持仓中达到止损线同时又满足买入条件怎么办？</li>
<li>A：该策略先把所有股票的开盘价跑一遍，上述类型股票由于amount&gt;0，不符合买入条件，故只卖不买，无矛盾。</li>
</ul>
<h3 id="2-4-小市值策略"><a href="#2-4-小市值策略" class="headerlink" title="2.4 小市值策略"></a>2.4 小市值策略</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小市值策略（单因子选股）</span></span><br><span class="line"><span class="comment"># 标的：沪深300池</span></span><br><span class="line"><span class="comment"># 选取股票池中市值最小的N只股票</span></span><br><span class="line"><span class="comment"># 更新持仓：</span></span><br><span class="line"><span class="comment">#   1. 已有持仓中不在新列表的票清掉</span></span><br><span class="line"><span class="comment">#   2. 已有持仓在新列表中的票继续持有</span></span><br><span class="line"><span class="comment">#   3. 新列表中未持有的买入（资金平分）</span></span><br><span class="line"><span class="comment"># 更新时间： 每月第一个交易日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运行函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查市值</span></span><br><span class="line">    g.q  = query(valuation).<span class="built_in">filter</span>(valuation.code.in_(g.security)) <span class="comment">#市值存放在valuation表中</span></span><br><span class="line">    g.N = <span class="number">20</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    df = get_fundamentals(g.q)[[<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;market_cap&#x27;</span>]] <span class="comment">#取市值列表</span></span><br><span class="line">    df = df.sort_values(<span class="string">&#x27;market_cap&#x27;</span>).iloc[:g.N,:] <span class="comment">#市值升序排列（取前N个小市值票）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先列要持有哪些票</span></span><br><span class="line">    to_hold = df[<span class="string">&#x27;code&#x27;</span>].values</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 不在持有名单的票：卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> to_hold:</span><br><span class="line">            order_target(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 要持有但是还没有买的票</span></span><br><span class="line">    to_buy = [stock <span class="keyword">for</span> stock <span class="keyword">in</span> to_hold <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 买入新持有的票</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(to_buy) &gt;<span class="number">0</span>:</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(to_buy) <span class="comment"># 资金平均分配</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> to_buy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2021/05/27/Z6f5IkayjA7w93o.png" alt="strategy4result.PNG"></p>
<p>注：进一步可以剔除股票池的ST股。</p>
<h3 id="2-5-多因子选股"><a href="#2-5-多因子选股" class="headerlink" title="2.5 多因子选股"></a>2.5 多因子选股</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多因子选股</span></span><br><span class="line"><span class="comment"># 标的：沪深300池</span></span><br><span class="line"><span class="comment"># 因子：市值，ROE;</span></span><br><span class="line"><span class="comment"># 模型：评分 = 归一化（市值 - ROE），选择评分最大的后N只票</span></span><br><span class="line"><span class="comment"># 择时： 每月第一个交易日更新持仓</span></span><br><span class="line"><span class="comment"># 更新持仓：</span></span><br><span class="line"><span class="comment">#   1. 已有持仓中不在新列表的票清掉</span></span><br><span class="line"><span class="comment">#   2. 已有持仓在新列表中的票继续持有</span></span><br><span class="line"><span class="comment">#   3. 新列表中未持有的买入（资金平分）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查股票财务数据</span></span><br><span class="line">    g.q  = query(valuation, indicator).<span class="built_in">filter</span>(valuation.code.in_(g.security)) <span class="comment">#市值和ROE分别存放在valuation和indicator表中</span></span><br><span class="line">    g.N = <span class="number">20</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    df = get_fundamentals(g.q)[[<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;market_cap&#x27;</span>, <span class="string">&#x27;roe&#x27;</span>]] <span class="comment">#取市值和ROE数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据归一化</span></span><br><span class="line">    df[<span class="string">&#x27;market_cap&#x27;</span>] = (df[<span class="string">&#x27;market_cap&#x27;</span>] - df[<span class="string">&#x27;market_cap&#x27;</span>].<span class="built_in">min</span>()) / (df[<span class="string">&#x27;market_cap&#x27;</span>].<span class="built_in">max</span>() - df[<span class="string">&#x27;market_cap&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line">    df[<span class="string">&#x27;roe&#x27;</span>] = (df[<span class="string">&#x27;roe&#x27;</span>] - df[<span class="string">&#x27;roe&#x27;</span>].<span class="built_in">min</span>()) / (df[<span class="string">&#x27;roe&#x27;</span>].<span class="built_in">max</span>() - df[<span class="string">&#x27;roe&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line">    </span><br><span class="line">    df[<span class="string">&#x27;score&#x27;</span>] = df[<span class="string">&#x27;roe&#x27;</span>] - df[<span class="string">&#x27;market_cap&#x27;</span>] <span class="comment">#评分模型</span></span><br><span class="line"></span><br><span class="line">    df = df.sort_values(<span class="string">&#x27;score&#x27;</span>).iloc[-g.N:,:] <span class="comment">#评分升序排列（取评分最大的后N个票）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先列要持有哪些票</span></span><br><span class="line">    to_hold = df[<span class="string">&#x27;code&#x27;</span>].values</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不在持有名单的票：卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> to_hold:</span><br><span class="line">            order_target(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要持有但是还没有买的票</span></span><br><span class="line">    to_buy = [stock <span class="keyword">for</span> stock <span class="keyword">in</span> to_hold <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 买入新持有的票</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(to_buy) &gt;<span class="number">0</span>:</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(to_buy) <span class="comment"># 资金平均分配</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> to_buy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/9gIFVX5YxoNjuEr.png" alt="strategy5result.PNG"></p>
<blockquote>
<p>不同因子的数据量级不同，需要做数据归一化处理（缩放到[0,1]之间），再做评分模型。</p>
</blockquote>
<p>$$<br>x^* = \frac{x - min}{max-min}, 或<br>x^* = \frac{x - \mu}{\sigma}<br>$$</p>
<h3 id="2-6-均值回归"><a href="#2-6-均值回归" class="headerlink" title="2.6 均值回归"></a>2.6 均值回归</h3><blockquote>
<p>跌下去的迟早要涨上来。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略：均值回归（单因子选股）</span></span><br><span class="line"><span class="comment"># 标的：沪深300</span></span><br><span class="line"><span class="comment"># 调仓：每月第1个交易日</span></span><br><span class="line"><span class="comment"># 策略：</span></span><br><span class="line"><span class="comment">#   1. 计算池中所有股票的N日均线，与均线的下跌偏离度 (MA - P)/ MA</span></span><br><span class="line"><span class="comment">#   2. 选取下跌偏离度最高的M只股票并调仓</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数设置</span></span><br><span class="line">    g.ma_days = <span class="number">30</span> <span class="comment"># 均线</span></span><br><span class="line">    g.stock_num = <span class="number">10</span> <span class="comment"># 持仓股票数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调仓函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    </span><br><span class="line">    sr = pd.Series(index = g.security)</span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> sr.index:</span><br><span class="line">        <span class="comment"># 计算所有股票当日的下跌偏离度</span></span><br><span class="line">        ma = attribute_history(stock, g.ma_days)[<span class="string">&#x27;close&#x27;</span>].mean() <span class="comment">#当日30日均线</span></span><br><span class="line">        p = get_current_data()[stock].day_open <span class="comment">#股票当日开盘价</span></span><br><span class="line">        ratio = (ma - p) / ma <span class="comment"># 下跌偏离度</span></span><br><span class="line">        sr[stock] = ratio</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排序并找到偏离度最高的10只票,准备持有</span></span><br><span class="line">    to_hold = sr.nlargest(g.stock_num).index.values <span class="comment">#速度快于sort_values函数</span></span><br><span class="line">    <span class="comment"># sort排序方法，与nlargest方法结果对应不上</span></span><br><span class="line">    <span class="comment">#tohold = sr.sort_values().iloc[:g.stock_num].index.values</span></span><br><span class="line">    <span class="comment">#print(tohold)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不在持有名单的票：卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> to_hold:</span><br><span class="line">            order_target_value(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要持有但是还没有买的票</span></span><br><span class="line">    to_buy = [stock <span class="keyword">for</span> stock <span class="keyword">in</span> to_hold <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 买入新持有的票</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(to_buy) &gt;<span class="number">0</span>:</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(to_buy) <span class="comment"># 资金平均分配</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> to_buy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/JQCfrwL1PVkIi3X.png" alt="strategy6result.PNG"></p>
<h3 id="2-7-布林带策略"><a href="#2-7-布林带策略" class="headerlink" title="2.7 布林带策略"></a>2.7 布林带策略</h3><blockquote>
<p>Bollinger Band（布林带/布林线/保利加通道）：择时（P&gt; up线则清仓，P&lt;down线则买入）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略：布林带策略</span></span><br><span class="line"><span class="comment"># 类型：择时</span></span><br><span class="line"><span class="comment"># 标的：贵州茅台</span></span><br><span class="line"><span class="comment"># 策略：</span></span><br><span class="line"><span class="comment">#   1. P &gt; UP线 且 持仓：清仓</span></span><br><span class="line"><span class="comment">#   2. P &gt; down线 且 未持仓：买入</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment">#   g.N = 20 ：20日均线</span></span><br><span class="line"><span class="comment">#   g.k = 2 ：布林带宽度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调仓函数</span></span><br><span class="line">    run_daily(period, time=<span class="string">&#x27;every_bar&#x27;</span>) <span class="comment">#指定每天跑什么函数（period）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = <span class="string">&#x27;600519.XSHG&#x27;</span> <span class="comment"># 选定交易股票为茅台</span></span><br><span class="line">    g.M = <span class="number">20</span> <span class="comment"># 20日均线</span></span><br><span class="line">    g.k = <span class="number">2</span> <span class="comment"># 布林带宽度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    sr = attribute_history(g.security, g.M)[<span class="string">&#x27;close&#x27;</span>] <span class="comment"># 前M日收盘价</span></span><br><span class="line">    ma = sr.mean() <span class="comment">#M日均线</span></span><br><span class="line">    up = ma + g.k * sr.std()</span><br><span class="line">    down = ma - g.k * sr.std()</span><br><span class="line">    p = get_current_data()[g.security].day_open <span class="comment">#当前价</span></span><br><span class="line">    cash = context.portfolio.available_cash <span class="comment">#持有现金</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> p &lt; down <span class="keyword">and</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        order_value(g.security, cash)</span><br><span class="line">    <span class="keyword">elif</span> p &gt; up <span class="keyword">and</span> g.security <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        order_target(g.security, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/vclIrE7DU2hBoN9.png" alt="strategy7result.PNG"></p>
<h3 id="2-8-PEG策略"><a href="#2-8-PEG策略" class="headerlink" title="2.8 PEG策略"></a>2.8 PEG策略</h3><blockquote>
<p>股票定价合理的公司，市盈率= 收益增长率。（彼得.林奇）</p>
</blockquote>
<p>$$<br>PEG = \frac{PE}{G \times 100}，PE = \frac{P}{EPS}，G = \frac{EPS(i)-EPS(i-1)}{EPS(i-1)}，P为股价，EPS是每股收益<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略：PEG </span></span><br><span class="line"><span class="comment"># 类型：选股</span></span><br><span class="line"><span class="comment"># 标的：沪深300池</span></span><br><span class="line"><span class="comment"># 策略：</span></span><br><span class="line"><span class="comment">#   1.选择PEG最小的N只股票调仓</span></span><br><span class="line"><span class="comment">#   2.过滤掉PE或收益增长率为负的票</span></span><br><span class="line"><span class="comment"># 调仓：每月第1个交易日</span></span><br><span class="line"><span class="comment"># 参数：N</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数设置</span></span><br><span class="line">    g.N = <span class="number">20</span> <span class="comment"># 持仓股票数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 财务数据所在列表定位（PE，收益增长率）</span></span><br><span class="line">    g.q = query(valuation.code, valuation.pe_ratio, indicator.inc_net_profit_year_on_year).<span class="built_in">filter</span>(valuation.code.in_(g.security))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调仓函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 指标计算</span></span><br><span class="line">    df = get_fundamentals(g.q) <span class="comment"># 财务数据获取（PE，收益增长率）</span></span><br><span class="line">    df = df[(df[<span class="string">&#x27;pe_ratio&#x27;</span>]&gt;<span class="number">0</span>) &amp; (df[<span class="string">&#x27;inc_net_profit_year_on_year&#x27;</span>]&gt;<span class="number">0</span>)] <span class="comment">#过滤异常数据</span></span><br><span class="line">    df[<span class="string">&#x27;peg&#x27;</span>] = df[<span class="string">&#x27;pe_ratio&#x27;</span>] / df[<span class="string">&#x27;inc_net_profit_year_on_year&#x27;</span>] /<span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排序并找到PEG最小的N只票,准备持有</span></span><br><span class="line">    df = df.sort_values(<span class="string">&#x27;peg&#x27;</span>)</span><br><span class="line">    to_hold = df.iloc[:g.N][<span class="string">&#x27;code&#x27;</span>].values </span><br><span class="line">    <span class="comment">#to_hold = df[&#x27;code&#x27;][:g.N].values # 两种写法皆可</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不在持有名单的票：卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> to_hold:</span><br><span class="line">            order_target_value(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要持有但是还没有买的票</span></span><br><span class="line">    to_buy = [stock <span class="keyword">for</span> stock <span class="keyword">in</span> to_hold <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 买入新持有的票</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(to_buy) &gt;<span class="number">0</span>:</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(to_buy) <span class="comment"># 资金平均分配</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> to_buy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/kL7gmI2RauENFWU.png" alt="strategy8result.PNG"></p>
<h3 id="2-9-动量反转策略"><a href="#2-9-动量反转策略" class="headerlink" title="2.9 动量反转策略"></a>2.9 动量反转策略</h3><blockquote>
<p>涨得猛的还会继续涨（动量策略）；涨得少的会补涨（反转策略）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略： 动量反转策略</span></span><br><span class="line"><span class="comment"># 类型：选股</span></span><br><span class="line"><span class="comment"># 标的：沪深300池</span></span><br><span class="line"><span class="comment"># 策略：</span></span><br><span class="line"><span class="comment">#   选择收益率最大的N只票调仓（动量策略）</span></span><br><span class="line"><span class="comment">#   选择收益率最小的N只票调仓（反转策略）</span></span><br><span class="line"><span class="comment"># 调仓：每月第1个交易日</span></span><br><span class="line"><span class="comment"># 参数：N</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数设置</span></span><br><span class="line">    g.N = <span class="number">10</span> <span class="comment"># 持仓股票数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调仓函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取股票池中30天的收盘价</span></span><br><span class="line">    df_close = history(<span class="number">30</span>, field=<span class="string">&#x27;close&#x27;</span>, security_list = <span class="built_in">list</span>(g.security)).T <span class="comment">#转置</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 收益率计算</span></span><br><span class="line">    df_close[<span class="string">&#x27;ret&#x27;</span>] = (df_close.iloc[:,-<span class="number">1</span>] - df_close.iloc[:,<span class="number">0</span>]) / df_close.iloc[:,<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排序（降序）</span></span><br><span class="line">    sorted_stocks = df_close.sort_values(<span class="string">&#x27;ret&#x27;</span>, ascending = <span class="literal">False</span>).index.values </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 准备持有的票</span></span><br><span class="line">    <span class="comment">#to_hold = sorted_stocks[:g.N] # 动量策略（找最大的N只票持有）</span></span><br><span class="line">    to_hold = sorted_stocks[-g.N:] <span class="comment"># 反转策略（找最小的N只票持有）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不在持有名单的票：卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> to_hold:</span><br><span class="line">            order_target_value(stock, <span class="number">0</span>) <span class="comment">#清仓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要持有但是还没有买的票</span></span><br><span class="line">    to_buy = [stock <span class="keyword">for</span> stock <span class="keyword">in</span> to_hold <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 买入新持有的票</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(to_buy) &gt;<span class="number">0</span>:</span><br><span class="line">        cash_per_stock = context.portfolio.available_cash / <span class="built_in">len</span>(to_buy) <span class="comment"># 资金平均分配</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> to_buy:</span><br><span class="line">            order_value(stock, cash_per_stock)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>动量策略：</p>
<p><img src="https://i.loli.net/2021/05/27/rmboSFdiwpX6ATc.png" alt="strategy9result.PNG"></p>
<p>反转策略：</p>
<p><img src="https://i.loli.net/2021/05/27/ELdMQsXJ5OVnl9i.png" alt="strategy10result.PNG"></p>
<h3 id="2-10-羊驼交易法"><a href="#2-10-羊驼交易法" class="headerlink" title="2.10 羊驼交易法"></a>2.10 羊驼交易法</h3><blockquote>
<p>随机选股，周期调仓。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 策略： 羊驼交易法</span></span><br><span class="line"><span class="comment"># 类型：选股</span></span><br><span class="line"><span class="comment"># 标的：沪深300池</span></span><br><span class="line"><span class="comment"># 策略：</span></span><br><span class="line"><span class="comment">#   1. 随机选取N只股票（改进：买入历史收益率最低的N只票）</span></span><br><span class="line"><span class="comment">#   2. 调仓时卖掉M只收益率最差的票，再随机买入M只票（改进：买入池中收益率最低的N只票）</span></span><br><span class="line"><span class="comment"># 调仓：每月第1个交易日</span></span><br><span class="line"><span class="comment"># 参数：N</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>) <span class="comment"># 开启动态复权模式(真实价格)</span></span><br><span class="line">    set_order_cost(OrderCost(close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>,</span><br><span class="line">                            min_commission=<span class="number">5</span>), <span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>) <span class="comment">#印花税、佣金</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 设置比较基准（红线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标的选择</span></span><br><span class="line">    g.security = get_index_stocks(<span class="string">&#x27;000300.XSHG&#x27;</span>) <span class="comment"># 选定股票池为沪深300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数设置</span></span><br><span class="line">    g.period = <span class="number">30</span> <span class="comment">#收益率计算周期</span></span><br><span class="line">    g.N = <span class="number">10</span> <span class="comment">#持仓股票数</span></span><br><span class="line">    g.change = <span class="number">1</span> <span class="comment">#调仓股票数</span></span><br><span class="line">    g.init = <span class="literal">True</span> <span class="comment">#标志位</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调仓函数</span></span><br><span class="line">    <span class="comment">#run_daily(period, time=&#x27;every_bar&#x27;) #指定每天跑什么函数（period）</span></span><br><span class="line">    run_monthly(period, <span class="number">1</span>) <span class="comment"># 每月1一个交易日执行period函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#按收益率排序函数（降序）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sorted_stocks</span>(<span class="params">context, stocks</span>):</span></span><br><span class="line">    df = history(g.period, field=<span class="string">&#x27;close&#x27;</span>, security_list = <span class="built_in">list</span>(stocks)).T</span><br><span class="line">    df[<span class="string">&#x27;ret&#x27;</span>] = (df.iloc[:,-<span class="number">1</span>] - df.iloc[:,<span class="number">0</span>]) / df.iloc[:,<span class="number">0</span>]</span><br><span class="line">    df = df.sort_values(<span class="string">&#x27;ret&#x27;</span>, ascending = <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> df.index.values</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">period</span>(<span class="params">context</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> g.init: <span class="comment">#初始买入</span></span><br><span class="line">        stocks = get_sorted_stocks(context, g.security)[:g.N]</span><br><span class="line">        cash = context.portfolio.available_cash * <span class="number">0.9</span> / <span class="built_in">len</span>(stocks)</span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> stocks:</span><br><span class="line">            order_value(stock, cash)</span><br><span class="line">        g.init = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#现有持仓降序排序</span></span><br><span class="line">    stocks =  get_sorted_stocks(context, context.portfolio.positions.keys())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把表现最差的M只票卖掉</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> stocks[-g.change:]:</span><br><span class="line">        order_target(stock, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 买入池中收益率最低的M只票</span></span><br><span class="line">    stocks = get_sorted_stocks(context, g.security)</span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> stocks:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(context.portfolio.positions) &gt;= g.N: <span class="comment">#现有持仓超过N只便不再买入</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions: <span class="comment">#新增持仓</span></span><br><span class="line">            order_value(stock, context.portfolio.available_cash * <span class="number">0.9</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/27/djtuRmDflicS2EH.png" alt="strategy11result.PNG"></p>
<blockquote>
<p>还有海龟交易法，鳄鱼交易法等。</p>
</blockquote>
<hr>
<h2 id="0x04-回测框架"><a href="#0x04-回测框架" class="headerlink" title="0x04 回测框架"></a>0x04 回测框架</h2><p>本地回测框架需要满足下列基本功能：</p>
<ol>
<li>保存上下文信息（用户数据，回测时间段，持仓信息等）</li>
<li>获取历史数据</li>
<li>下单函数（买什么，买多少，什么时间价格买）</li>
<li>用户接口（输入参数，实现策略等）</li>
</ol>
<h3 id="4-0-准备工作"><a href="#4-0-准备工作" class="headerlink" title="4.0 准备工作"></a>4.0 准备工作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># python : 3.8.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tushare</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> dateutil</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数设置 </span></span><br><span class="line"><span class="comment">#    对标聚宽右上角参数设置栏</span></span><br><span class="line">CASH = <span class="number">100000000</span> <span class="comment">#可用资金</span></span><br><span class="line">START_DATE = <span class="string">&#x27;2016-01-07&#x27;</span> <span class="comment">#回测开始时间</span></span><br><span class="line">END_DATE = <span class="string">&#x27;2016-01-31&#x27;</span> <span class="comment">#回测结束时间</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-保存上下文信息"><a href="#4-1-保存上下文信息" class="headerlink" title="4.1 保存上下文信息"></a>4.1 保存上下文信息</h3><h4 id="4-1-1-获取全部交易日期"><a href="#4-1-1-获取全部交易日期" class="headerlink" title="4.1.1 获取全部交易日期"></a>4.1.1 获取全部交易日期</h4><blockquote>
<p>本地读取之前生成的交易日文件，生成方式<a href="https://meilongzhendongzi.github.io/2021/05/28/tushare-trade-cal-%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">戳这里</a>。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取1990-12-19至今全部日期并存为csv, &quot;calendarDate&quot;列为日期，对应&quot;isOpen&quot;01列，&quot;1&quot;表示为交易日</span></span><br><span class="line"><span class="comment">#替代tushare.trade_cal()= pd.read_csv(&#x27;http://file.tushare.org/tsdata/calAll.csv&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade_cal_new</span>():</span></span><br><span class="line">    today = datetime.date.today() <span class="comment">#今天</span></span><br><span class="line">    all_days = pd.date_range(<span class="string">&#x27;1990-12-19&#x27;</span>, today) <span class="comment">#全部日期，type(all_days) = DatetimeIndex, type(all_days[i]) = Timestamp</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#交易日</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;work_day.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        work_days_list = f.readlines() <span class="comment"># &#x27;1990-12-19\n&#x27;</span></span><br><span class="line">        <span class="comment">#work_days = pd.to_datetime(work_days_list) #type(work_days) = DatetimeIndex, type(work_days[i]) = Timestamp</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#判断工作日数据是否要更新</span></span><br><span class="line">        last_days_year = work_days_list[-<span class="number">1</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> today.year &gt; <span class="built_in">int</span>(last_days_year):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;工作日数据需要更新&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#添加01列</span></span><br><span class="line">    trade_cal = pd.DataFrame(np.zeros(<span class="built_in">len</span>(all_days), <span class="built_in">int</span>), index = all_days, columns = [<span class="string">&#x27;isOpen&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> all_days:   </span><br><span class="line">        <span class="keyword">if</span> day.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)+<span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> work_days_list:</span><br><span class="line">            trade_cal.loc[day] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">#添加calendarDate列</span></span><br><span class="line">    trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>] = all_days</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存为csv</span></span><br><span class="line">    trade_cal.to_csv(<span class="string">&quot;trade_cal_%s.csv&quot;</span> % (today.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> trade_cal</span><br><span class="line"></span><br><span class="line">trade_cal = trade_cal_new() <span class="comment">#全部交易日期</span></span><br><span class="line"><span class="comment">#print(trade_cal)</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-保存上下文信息的类"><a href="#4-1-2-保存上下文信息的类" class="headerlink" title="4.1.2 保存上下文信息的类"></a>4.1.2 保存上下文信息的类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存上下文信息的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cash, start_date, end_date</span>):</span></span><br><span class="line">        self.cash = cash <span class="comment">#可用资金</span></span><br><span class="line">        self.start_date = start_date <span class="comment">#回测开始时间 </span></span><br><span class="line">        self.end_date = end_date <span class="comment">#回测结束时间</span></span><br><span class="line">        self.positions = &#123;&#125; <span class="comment">#持仓信息</span></span><br><span class="line">        self.benchmark = <span class="literal">None</span> <span class="comment">#比较基准</span></span><br><span class="line">        self.date_range = trade_cal[(trade_cal[<span class="string">&quot;isOpen&quot;</span>]==<span class="number">1</span>) &amp; \</span><br><span class="line">                                    (trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>]&gt;=start_date) &amp; \</span><br><span class="line">                                    (trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>]&lt;=end_date) ].index <span class="comment">#取开始和结束时间中间所有的交易日期</span></span><br><span class="line">        <span class="comment">#self.date = datetime.datetime.strptime(&quot;&quot;, start_date) #模拟当天日期（格式化）</span></span><br><span class="line">        <span class="comment">#self.date = dateutil.parser.parse(start_date) #模拟当天的日期（格式化）</span></span><br><span class="line">        self.date = <span class="literal">None</span> <span class="comment">#模拟当天的日期，后面在run()中赋值</span></span><br><span class="line">        </span><br><span class="line">context = Context(CASH, START_DATE, END_DATE)</span><br><span class="line"><span class="comment">#print(context.date_range)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存全局变量的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">g = G()</span><br></pre></td></tr></table></figure>

<h3 id="4-2-获取历史数据"><a href="#4-2-获取历史数据" class="headerlink" title="4.2 获取历史数据"></a>4.2 获取历史数据</h3><h4 id="4-2-1-获取时间段内的数据"><a href="#4-2-1-获取时间段内的数据" class="headerlink" title="4.2.1 获取时间段内的数据"></a>4.2.1 获取时间段内的数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取时间段内的股票数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attribute_daterange_history</span>(<span class="params">security, start_date, end_date, fields=(<span class="params"><span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;close&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;volume&#x27;</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">try</span>: <span class="comment">#</span></span><br><span class="line">        f = <span class="built_in">open</span>(security+<span class="string">&#x27;.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        df = pd.read_csv(security+<span class="string">&#x27;.csv&#x27;</span>, index_col=<span class="string">&#x27;date&#x27;</span>, parse_dates=[<span class="string">&#x27;date&#x27;</span>]).loc[start_date:end_date, :]</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        df = tushare.get_k_data(security, start_date, end_date)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df[<span class="built_in">list</span>(fields)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(attribute_daterange_history(&#x27;600519&#x27;, &#x27;2015-03-01&#x27;,&#x27;2016-02-10&#x27;))</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-获取前N天的股票数据"><a href="#4-2-2-获取前N天的股票数据" class="headerlink" title="4.2.2 获取前N天的股票数据"></a>4.2.2 获取前N天的股票数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从模拟日期的前一天起算，往前数count天的security股票数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attribute_history</span>(<span class="params">security, count, fields=(<span class="params"><span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;close&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;volume&#x27;</span></span>)</span>):</span></span><br><span class="line">    <span class="comment">#模拟日期的前一天</span></span><br><span class="line">    end_date = (context.date - datetime.timedelta(days=<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从模拟当天前一天起算，往前数count天</span></span><br><span class="line">    start_date = trade_cal[(trade_cal[<span class="string">&#x27;isOpen&#x27;</span>]==<span class="number">1</span>) &amp; \</span><br><span class="line">                            (trade_cal[<span class="string">&#x27;calendarDate&#x27;</span>]&lt;= end_date)][-count:].iloc[<span class="number">0</span>,:][<span class="string">&#x27;calendarDate&#x27;</span>] </span><br><span class="line">    <span class="comment">#print(end_date, start_date)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> attribute_daterange_history(security, start_date, end_date, fields)</span><br><span class="line"></span><br><span class="line"><span class="comment">#attribute_history(&#x27;600519&#x27;,10)</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-下单函数"><a href="#4-3-下单函数" class="headerlink" title="4.3 下单函数"></a>4.3 下单函数</h3><h4 id="4-3-1-获取模拟日期的股价"><a href="#4-3-1-获取模拟日期的股价" class="headerlink" title="4.3.1 获取模拟日期的股价"></a>4.3.1 获取模拟日期的股价</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取今日股价</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_today_data</span>(<span class="params">security</span>):</span></span><br><span class="line">    today = context.date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>: <span class="comment">#如果本地存在数据</span></span><br><span class="line">        f = <span class="built_in">open</span>(security+<span class="string">&#x27;.csv&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        data = pd.read_csv(security+<span class="string">&#x27;.csv&#x27;</span>, index_col=<span class="string">&#x27;date&#x27;</span>, parse_dates=[<span class="string">&#x27;date&#x27;</span>]).loc[today,:]</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        data = tushare.get_k_data(security, today, today).iloc[<span class="number">0</span>,:]</span><br><span class="line">    <span class="keyword">except</span> KeyError: <span class="comment">#股票停牌或今天非交易日</span></span><br><span class="line">        data = pd.Series() <span class="comment">#传入空数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(&#x27;600519&#x27;) #默认今天为START_DATE</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-2-基础下单函数"><a href="#4-3-2-基础下单函数" class="headerlink" title="4.3.2 基础下单函数"></a>4.3.2 基础下单函数</h4><blockquote>
<p>此处尚未实现扣除交易费用和T+1两项功能（context.positions设置两个值，当日买入后锁仓即可）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下单多少股</span></span><br><span class="line"><span class="comment">#amount&gt;0: 买； amount&lt;0: 卖</span></span><br><span class="line"><span class="comment">#这里用开盘价下单，但一般是在此基础上加滑点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_order</span>(<span class="params">today_data, security, amount</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#停牌</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(today_data) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;今日停牌&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">#退出</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = today_data[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#可用的钱不够</span></span><br><span class="line">    <span class="keyword">if</span> context.cash - amount * p &lt; <span class="number">0</span>: </span><br><span class="line">        amount = <span class="built_in">int</span>(context.cash / p) <span class="comment">#此时最多能买多少股</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;现金不足,已调整为买入%d股&quot;</span> % (amount))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#买卖股数不是100的倍数</span></span><br><span class="line">    <span class="keyword">if</span> amount % <span class="number">100</span> != <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">if</span> amount != -context.positions.get(security, <span class="number">0</span>) : <span class="comment">#只要不是清仓，都需要调整为100的倍数</span></span><br><span class="line">            amount = <span class="built_in">int</span>(amount / <span class="number">100</span>) * <span class="number">100</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不是100的倍数，已调整为下单%d股&quot;</span> % amount)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#想卖的股票比持仓的多</span></span><br><span class="line">    <span class="keyword">if</span> context.positions.get(security, <span class="number">0</span>) &lt; -amount: </span><br><span class="line">        amount = -context.positions.get(security, <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;卖出股票不能超过持仓数，已调整卖出为%d股&quot;</span> % (amount))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#To Do: T+1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#To Do: 交易费用 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#更新持仓</span></span><br><span class="line">    context.positions[security] = context.positions.get(security, <span class="number">0</span>) + amount</span><br><span class="line">    <span class="keyword">if</span> context.positions[security] == <span class="number">0</span>: <span class="comment">#清仓后需删除字典（否则逻辑出错）</span></span><br><span class="line">        <span class="keyword">del</span> context.positions[security]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#更新现金</span></span><br><span class="line">    context.cash -= amount * p</span><br><span class="line"></span><br><span class="line"><span class="comment">#_order(get_today_data(&#x27;600519&#x27;), &#x27;600519&#x27;, 100) #买100手茅台</span></span><br><span class="line"><span class="comment">#print(context.positions) #查看持仓</span></span><br><span class="line"><span class="comment">#print(context.cash) #查看现金</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-四个下单函数"><a href="#4-3-3-四个下单函数" class="headerlink" title="4.3.3 四个下单函数"></a>4.3.3 四个下单函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下单函数1:下单amount股</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">security, amount</span>):</span></span><br><span class="line">    today_data = get_today_data(security)</span><br><span class="line">    _order(today_data, security, amount)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下单函数2:使仓位更新到amount股</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_target</span>(<span class="params">security, amount</span>):</span></span><br><span class="line">    <span class="keyword">if</span> amount &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数量不能为负，已调整成0&quot;</span>)</span><br><span class="line">        amount = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    hold_amount = context.positions.get(security,<span class="number">0</span>) <span class="comment">#目前仓位多少 #ToDo: T+1 （context.positions写两个值， closeable, total）</span></span><br><span class="line">    delta_amount = amount - hold_amount <span class="comment">#为了达到目的需要下单多少股</span></span><br><span class="line">    order(security, delta_amount)</span><br><span class="line">    <span class="comment">#后面两行等价于order()</span></span><br><span class="line">    <span class="comment">#today_data = get_today_data(security)</span></span><br><span class="line">    <span class="comment">#_order(today_data, security, delta_amount)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下单函数3：按价值下单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_value</span>(<span class="params">security, value</span>):</span></span><br><span class="line">    today_data = get_today_data(security)</span><br><span class="line">    amount = <span class="built_in">int</span>(value / today_data[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">    _order(today_data, security, amount)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#下单函数4：使仓位更新到value价值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_target_value</span>(<span class="params">security,value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;价值不能为负，已调整为0&quot;</span>)</span><br><span class="line">        value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    hold_value = context.positions.get(security, <span class="number">0</span>) * today_data[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    delta_value = value - hold_value</span><br><span class="line">    order_value(security, delta_value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#order(&#x27;600519&#x27;,100)</span></span><br><span class="line"><span class="comment">#order_value(&#x27;600519&#x27;,30000)</span></span><br><span class="line"><span class="comment">#print(context.positions)</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-回测函数"><a href="#4-4-回测函数" class="headerlink" title="4.4 回测函数"></a>4.4 回测函数</h3><h4 id="4-4-1-用户接口"><a href="#4-4-1-用户接口" class="headerlink" title="4.4.1 用户接口"></a>4.4.1 用户接口</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基准比较函数</span></span><br><span class="line"><span class="comment">#   此处只支持一只股票作为基准</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_benchmark</span>(<span class="params">security</span>):</span></span><br><span class="line">    context.benchmark = security</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化（输入全局参数）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    g.p1 = <span class="number">5</span></span><br><span class="line">    g.p2 = <span class="number">60</span></span><br><span class="line">    g.security = <span class="string">&#x27;600519&#x27;</span></span><br><span class="line">    set_benchmark(g.security)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#策略函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment">#策略1</span></span><br><span class="line">    <span class="comment">#order(SECURITY,100)</span></span><br><span class="line">		</span><br><span class="line">    <span class="comment">#策略2</span></span><br><span class="line">    hist = attribute_history(g.security, g.p2) <span class="comment">#获取历史数据</span></span><br><span class="line">    ma5 = hist[<span class="string">&#x27;close&#x27;</span>][-g.p1:].mean() <span class="comment">#5日均线</span></span><br><span class="line">    ma60 = hist[<span class="string">&#x27;close&#x27;</span>].mean() <span class="comment">#60日均线</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ma5 &gt; ma60 <span class="keyword">and</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.positions: <span class="comment">#金叉</span></span><br><span class="line">        order_value(g.security, context.cash)</span><br><span class="line">    <span class="keyword">elif</span> ma5 &lt; ma60 <span class="keyword">and</span> g.security <span class="keyword">in</span> context.positions: <span class="comment">#死叉</span></span><br><span class="line">        order_target(g.security, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-4-2-收益函数"><a href="#4-4-2-收益函数" class="headerlink" title="4.4.2 收益函数"></a>4.4.2 收益函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#创建数据对象，准备记录每个交易日的收益率</span></span><br><span class="line">    plt_df = pd.DataFrame(index=pd.to_datetime(context.date_range), columns=[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    init_value = context.cash</span><br><span class="line">    initialize(context)</span><br><span class="line">    last_price = &#123;&#125; <span class="comment">#记录最近一个交易日的价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算每个交易日的总价值</span></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> context.date_range:</span><br><span class="line">        dt = dt.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>) <span class="comment">#timestamp -&gt; str</span></span><br><span class="line">        context.date = dateutil.parser.parse(dt) <span class="comment">#模拟当天日期，赋值</span></span><br><span class="line">        handle_data(context) <span class="comment">#执行策略函数</span></span><br><span class="line">        value = context.cash <span class="comment">#股票和现金总价值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#计算当天的总价值</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> context.positions:</span><br><span class="line">            today_data = get_today_data(stock)          </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(today_data) == <span class="number">0</span>: <span class="comment">#停牌</span></span><br><span class="line">                p = last_price[stock]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = today_data[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">                last_price[stock] = p           </span><br><span class="line">            value += p * context.positions[stock] <span class="comment">#将持仓中所有股票的价值加到value里</span></span><br><span class="line">        plt_df.loc[dt, <span class="string">&#x27;value&#x27;</span>] = value <span class="comment">#将当天总的value赋值给plt_df</span></span><br><span class="line">    <span class="comment">#print(plt_df)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算收益率（与初始现金比较）</span></span><br><span class="line">    plt_df[<span class="string">&#x27;ratio&#x27;</span>] = (plt_df[<span class="string">&#x27;value&#x27;</span>] - init_value) / init_value</span><br><span class="line">    <span class="comment">#print(plt_df[&#x27;ratio&#x27;])</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算基准股票的收益率</span></span><br><span class="line">    bm_df = attribute_daterange_history(context.benchmark, context.start_date, context.end_date) <span class="comment">#取基准股票同一时段的股价</span></span><br><span class="line">    bm_init = bm_df[<span class="string">&#x27;open&#x27;</span>][<span class="number">0</span>] <span class="comment">#基准股票的初始股价</span></span><br><span class="line">    plt_df[<span class="string">&#x27;benchmark_ratio&#x27;</span>] = (bm_df[<span class="string">&#x27;open&#x27;</span>] - bm_init) / bm_init</span><br><span class="line">    <span class="comment">#print(plt_df)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    plt_df[[<span class="string">&#x27;ratio&#x27;</span>, <span class="string">&#x27;benchmark_ratio&#x27;</span>]].plot()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="0x05-策略评价"><a href="#0x05-策略评价" class="headerlink" title="0x05 策略评价"></a>0x05 策略评价</h2><hr>
<h2 id="0x99-学习资料"><a href="#0x99-学习资料" class="headerlink" title="0x99 学习资料"></a>0x99 学习资料</h2><h4 id="（一）B站网课"><a href="#（一）B站网课" class="headerlink" title="（一）B站网课"></a>（一）B站网课</h4><ol>
<li><a href="https://www.bilibili.com/video/BV1i741147LS">清华计算机博士带你学-Python金融量化分析</a> </li>
<li>AQF</li>
<li>恶魔的蛇果</li>
</ol>
<h4 id="（二）聚宽"><a href="#（二）聚宽" class="headerlink" title="（二）聚宽"></a>（二）聚宽</h4><ol>
<li><a href="https://www.joinquant.com/view/community/detail/8ec7aaaa899cf928550f89a104637f22">零基础量化交易课程</a></li>
<li><a href="https://www.joinquant.com/help/api/help#name:api">聚宽API文档</a></li>
<li><a href="https://www.joinquant.com/study">量化课堂</a></li>
<li><a href="https://www.joinquant.com/view/community/list?listType=1">聚宽社区</a></li>
</ol>
<h4 id="（三）Github"><a href="#（三）Github" class="headerlink" title="（三）Github"></a>（三）Github</h4><h4 id="（四）其他"><a href="#（四）其他" class="headerlink" title="（四）其他"></a>（四）其他</h4><ol>
<li>vn.py</li>
<li>米筐</li>
<li>阿布量化</li>
</ol>
<h4 id="（五）文献"><a href="#（五）文献" class="headerlink" title="（五）文献"></a>（五）文献</h4><hr>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>quant</tag>
      </tags>
  </entry>
  <entry>
    <title>系统科学</title>
    <url>/2021/05/30/%E7%B3%BB%E7%BB%9F%E7%A7%91%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="0x00-基本概念"><a href="#0x00-基本概念" class="headerlink" title="0x00 基本概念"></a>0x00 基本概念</h2><h3 id="0-1-系统"><a href="#0-1-系统" class="headerlink" title="0.1 系统"></a>0.1 系统</h3><h4 id="0-1-1-定义"><a href="#0-1-1-定义" class="headerlink" title="0.1.1 定义"></a>0.1.1 定义</h4><blockquote>
<p>系统是相互联系、作用的要素组成的具有一定结构和功能的整体。</p>
</blockquote>
<h4 id="0-1-2-组分和结构"><a href="#0-1-2-组分和结构" class="headerlink" title="0.1.2 组分和结构"></a>0.1.2 组分和结构</h4><ol>
<li>组分：系统部分中的结构单元；</li>
<li>结构：组分和组分间的关联方式的总和；</li>
<li>部分：系统的研究对象；</li>
<li>组织：有序的结构。</li>
</ol>
<h4 id="0-1-3-涌现性的层次"><a href="#0-1-3-涌现性的层次" class="headerlink" title="0.1.3 涌现性的层次"></a>0.1.3 涌现性的层次</h4><ol>
<li>整体涌现性：系统作为整体才具有、分开或分开再组合变不具有的特性；</li>
<li>通俗解释：整体不等于部分和，1＋1 &gt; 2；</li>
<li>涌现性的影响因素<ul>
<li>规模效应：量变引起质变，如分子的热力学系统；</li>
<li>结构效应（关键）：指对象具有一定结构后涌现出新的性质，如细胞；</li>
<li>注：另有环境效应和组分效应（苗东升）；</li>
</ul>
</li>
<li>层次：元素到整体的涌现等级，一个等级代表一个层次。</li>
</ol>
<h4 id="0-1-4-系统分类（钱学森）"><a href="#0-1-4-系统分类（钱学森）" class="headerlink" title="0.1.4 系统分类（钱学森）"></a>0.1.4 系统分类（钱学森）</h4><ol>
<li>简单系统：小，大；</li>
<li>复杂系统：简单巨，复杂巨（一般复杂巨，社会等特殊复杂巨）。</li>
</ol>
<h4 id="0-1-5-环境与边界"><a href="#0-1-5-环境与边界" class="headerlink" title="0.1.5 环境与边界"></a>0.1.5 环境与边界</h4><ol>
<li>环境：系统之外、与系统有着不可忽略的联系的元素集合；</li>
<li>边界：将系统和环境区分开的元素集合。</li>
</ol>
<h4 id="0-1-6-行为与功能"><a href="#0-1-6-行为与功能" class="headerlink" title="0.1.6 行为与功能"></a>0.1.6 行为与功能</h4><ol>
<li>行为：系统相对于环境表现出来的任何变化；</li>
<li>功能：系统行为引起的任何有利于环境的作用。</li>
</ol>
<h4 id="0-1-7-状态与演化"><a href="#0-1-7-状态与演化" class="headerlink" title="0.1.7 状态与演化"></a>0.1.7 状态与演化</h4><ol>
<li>状态：系统可以观察和识别的状况、态势；</li>
<li>演化：系统的状态结构、行为功能随时间的变化。</li>
</ol>
<h4 id="0-1-8-信息"><a href="#0-1-8-信息" class="headerlink" title="0.1.8 信息"></a>0.1.8 信息</h4><ol>
<li>信息是客观世界的三大组成要素之一（另有物质和能量）；</li>
<li>信息又是物质的一种属性，可以表征其他任何物质属性；</li>
<li>定义：通信中消除了的不确定性（技术科学层次）；</li>
<li>信息的度量（信息熵）：I=-logP，P是概率；</li>
<li>系统内外交互实质是信息交流，系统演化及涌现性都需要信息观点来阐述。</li>
</ol>
<h4 id="0-1-9-混沌"><a href="#0-1-9-混沌" class="headerlink" title="0.1.9 混沌"></a>0.1.9 混沌</h4><ol>
<li>定义<ul>
<li>混沌是确定非线性系统中的随机现象（有界的、初值敏感的非周期运动）；</li>
<li>周期3蕴含混沌：[0,1]上的映射若存在3-周期点，则必有n-周期点；</li>
<li>度量空间V到自身的映射f，若满足下述三个条件，则其为混沌（映射）。<ul>
<li>初值敏感性：任何微小的初始误差都会引起计算结果的失败；</li>
<li>拓扑传递性：f不可分为两个互不影响的系统；</li>
<li>周期稠密性：f的周期点在V中稠密；</li>
</ul>
</li>
<li>连续混沌<ul>
<li>3维以上非线性连续系统才可能出现连续混沌；</li>
<li>1、2维系统无论控制参量如何变化，只可能出现平衡态或周期态；</li>
</ul>
</li>
</ul>
</li>
<li>连续混沌特征<ul>
<li>非周期性：混沌是系统的一种可能定态，但轨道既非单调又非周期；</li>
<li>奇怪吸引子的动力学行为：只能用相空间中有自相似结构的分形点集描述；</li>
<li>即稳定又不稳定<ul>
<li>奇怪吸引子对外部轨道吸引，进得来出不去，整体稳定；</li>
<li>吸引子内部不同轨道相互排斥，极不稳定；</li>
</ul>
</li>
<li>确定性系统的内部随机性：系统内部的非线性因素导致的；</li>
<li>长期行为的不可预测性<ul>
<li>短期行为可预测<ul>
<li>系统演化方程确定；</li>
<li>奇怪吸引子的相空间位置确定；</li>
<li>吸引子上的运动服从某种概率规律，具有统计意义的可预见性；</li>
</ul>
</li>
<li>对初态的敏感依赖性，使得系统长期运动同随机运动一样无法预测；</li>
</ul>
</li>
</ul>
</li>
<li>离散混沌特征<ul>
<li>对初值的敏感依赖性：内部的非线性因素导致，误差越放越大；</li>
<li>游荡集：局部不稳定，但整体又受限制、有界；</li>
<li>非整数维：奇怪吸引子具有分数维，是分形结构；</li>
</ul>
</li>
</ol>
<h4 id="0-1-10-必然性和偶然性、确定性与随机性"><a href="#0-1-10-必然性和偶然性、确定性与随机性" class="headerlink" title="0.1.10 必然性和偶然性、确定性与随机性"></a>0.1.10 必然性和偶然性、确定性与随机性</h4><ol>
<li>确定性和必然性<ul>
<li>系统状态由演化方程刻画，任一时刻确定性系统的状态所满足的关系是确定的，系统状态能够满足这一关系也是必然的；</li>
<li>随机系统在某一时刻的状态是随机的，但服从某一统计规律，规律确定的；</li>
</ul>
</li>
<li>随机性和偶然性<ul>
<li>随机性是偶然性的表现形式之一，确定性非线性方程的整体演化过程也有可能呈现随机现象，如混沌；</li>
<li>当然对于随机系统，其系统状态是随机的。</li>
</ul>
</li>
</ol>
<h3 id="0-2-系统方法论"><a href="#0-2-系统方法论" class="headerlink" title="0.2 系统方法论"></a>0.2 系统方法论</h3><ol>
<li>方法论：人们认识和改造世界的一般方法，即以何种方式观察和处理问题。</li>
<li>系统方法论的发展历史<ul>
<li>1940-1960s：一般系统论及老三论（控制论，运筹学，信息论）；</li>
<li>1960s：新三论（耗散结构，协同学，突变论），混沌，分形，超循环，系统学；</li>
</ul>
</li>
<li>哲学基础：唯物辩证法，核心是对立统一；</li>
<li>描述原则<ul>
<li>还原论＋整体论</li>
<li>局部＋整体</li>
<li>定性＋定量</li>
<li>确定性＋不确定性</li>
<li>系统分析＋系统综合</li>
</ul>
</li>
<li>我国的发展历史<ul>
<li>1955-1960：计划经济需要，运筹学与“统筹法”（华罗庚）；</li>
<li>1978-1980：国防科研需要，成立中国系统工程学会；</li>
<li>1986-1990：系统科学研究需要，“系统学讨论班”与开放的复杂巨系统理论。</li>
</ul>
</li>
</ol>
<h3 id="0-3-系统仿真"><a href="#0-3-系统仿真" class="headerlink" title="0.3 系统仿真"></a>0.3 系统仿真</h3><ol>
<li>定义：使用数学模型来模拟系统状态，通过计算机试验研究其演化规律的全过程。</li>
<li>特点<ul>
<li>高效：计算机环境下的试验成本低，效率高，段时间内即可把握系统规律；</li>
<li>自动：仿真软件自动输出结果；</li>
<li>多次：一个结果只是一次抽样，需多次试验进行统计推断；</li>
<li>软件：计算机试验需要好的软件和语言作支撑。</li>
</ul>
</li>
<li>基本步骤<ul>
<li>问题描述和定义</li>
<li>建模</li>
<li>数据采集：仿真输入和内部参数</li>
<li>模型确认：通过问专家，统计检验和试运行来确定建模是否合理</li>
<li>编程实现与模型验证：验证程序与模型间的一致性</li>
<li>运行程序，输出结果并分析</li>
</ul>
</li>
</ol>
<h2 id="0x01-连续动态系统"><a href="#0x01-连续动态系统" class="headerlink" title="0x01 连续动态系统"></a>0x01 连续动态系统</h2><h2 id="0x02-离散动态系统"><a href="#0x02-离散动态系统" class="headerlink" title="0x02 离散动态系统"></a>0x02 离散动态系统</h2><h2 id="0x03-自组织"><a href="#0x03-自组织" class="headerlink" title="0x03 自组织"></a>0x03 自组织</h2><h2 id="0x04-简单巨系统之演化分析方法"><a href="#0x04-简单巨系统之演化分析方法" class="headerlink" title="0x04 简单巨系统之演化分析方法"></a>0x04 简单巨系统之演化分析方法</h2><h2 id="0x05-复杂性"><a href="#0x05-复杂性" class="headerlink" title="0x05 复杂性"></a>0x05 复杂性</h2><h2 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h2><ol>
<li><a href="https://book.douban.com/subject/1322872/">系统科学（许国志）</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
